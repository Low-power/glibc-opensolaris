@node Low-Level Terminal Interface
@chapter Low-Level Terminal Interface

This chapter describes functions that are specific to terminal devices.
You can use these functions to do things like turn off input echoing;
set serial line characteristics such as baud rate and flow control; and
change which characters are used for end-of-file, command-line editing,
sending signals, and similar control functions.

Most of the functions in this chapter operate on file descriptors.
@xref{Low-Level Input/Output}, for more information about what a file
descriptor is and how to open a file descriptor for a terminal device.

@menu
* Terminal Identification::	How to determine if a file is a terminal
				 device, and what its name is.
* Input and Output Queues::	About flow control and typeahead.
* Terminal Modes::		How to inquire about and modify input and
				 output processing modes and other terminal
				 settings.
* Line Control Functions::	Sending break sequences, flushing buffered
				 input and output, and the like.
* Terminal Control Example::	How to read single characters without echo.
@end menu

@node Terminal Identification
@section Terminal Identification
@cindex terminal identification

The functions described in this chapter only work on files that
correspond to terminal devices.  You can find out whether a file
descriptor is associated with a terminal by using the @code{isatty}
function.

@comment unistd.h
@comment POSIX.1
@deftypefun int isatty (int @var{filedes})
This function returns @code{1} if @var{filedes} is a file descriptor
associated with an open terminal device, and @code{0} otherwise.
@end deftypefun

If a file descriptor is associated with a terminal, you can get its
associated file name using the @code{ttyname} function.  See also the
@code{ctermid} function, described in @ref{Controlling Terminal
Identification}.

@comment unistd.h
@comment POSIX.1
@deftypefun {char *} ttyname (int @var{filedes})
If the file descriptor @var{filedes} is associated with a terminal
device, the @code{ttyname} function returns a pointer to a
statically-allocated, null-terminated string containing the file name of
the terminal file.  The value is a null pointer if the file descriptor
isn't associated with a terminal, or the file name cannot be determined.
@end deftypefun

Prototypes for both @code{isatty} and @code{ttyname} are declared in
the header file @file{unistd.h}.
@pindex unistd.h


@node Input and Output Queues
@section Input and Output Queues

Many of the remaining functions in this section refer to the input and
output queues of a terminal device.  These queues implement a form of
buffering @emph{within the kernel} independent of the buffering
implemented by stream data structures.

@cindex terminal input queue
@cindex typeahead buffer
The @dfn{terminal input queue} is also sometimes referred to as its
@dfn{typeahead buffer}.  It contains characters that have been received
from the terminal, but not yet read by any process.  

The size of the terminal's input queue is described by the
@code{_POSIX_MAX_INPUT} and @code{MAX_INPUT} parameters; see @ref{File
System Parameters}.  If input flow control is enabled by setting the
@code{IXOFF} input mode bit (@pxref{Input Modes}), the terminal driver
transmits STOP and START characters to the terminal when necessary to
prevent the queue from overflowing.  Otherwise, input may be lost if it
comes in too fast.

@cindex terminal output queue
The @dfn{terminal output queue} is similar; it contains characters that
have been written by processes, but not yet transmitted to the terminal.
If ouput flow control is enabled by setting the @code{IXON} input mode
bit (@pxref{Input Modes}), the terminal driver obeys STOP and STOP
characters sent by the terminal to stop and restart transmission of
output.

@dfn{Flushing} the terminal input queue means discarding any characters
that have been received but not yet read.  Similarly, flushing the
terminal output queue means discarding any characters that have been
written but not yet transmitted.

@node Terminal Modes
@section Terminal Modes

This section describes the various terminal attributes that control how
input and output are done.  The functions, data structures, and symbolic
constants are all declared in the header file @file{termios.h}.
@pindex termios.h

@menu
* Terminal Mode Functions::	Descriptions of the functions and data
				 structures.
* Input Modes::			Flags controlling low-level input modes.
* Output Modes::		Flags controlling low-level output modes.
* Control Modes::		Flags controlling serial port behavior.
* Baud Rate::			How to set the baud rate on the serial port.
* Local Modes::			Flags controlling high-level input modes.
* Special Characters::		Characters that have special meanings, and
				 how to change them.
@end menu

@node Terminal Mode Functions
@subsection Terminal Mode Functions
@cindex terminal mode functions

Objects of type @code{struct termios} are used to represent terminal
attributes.  Details about the values of each of its components are
discussed in more detail below.

@comment termios.h
@comment POSIX.1
@deftp {Data Type} {struct termios}
Structures of type @code{termios} are used with the @code{tcgetattr}
and @code{tcsetattr} functions to describe terminal attributes.  The
structure includes at least the following members:

@table @code
@item tcflag_t c_iflag
A bit mask specifying input modes; see @ref{Input Modes}.

@item tcflag_t c_oflag
A bit mask specifying output modes; see @ref{Output Modes}.

@item tcflag_t c_cflag
A bit mask specifying control modes; see @ref{Control Modes}.

@item tcflag_t c_lflag
A bit mask specifying local modes; see @ref{Local Modes}.

@item cc_t c_cc[NCCS]
An array specifying which characters are associated with various
control functions; see @ref{Special Characters}.
@end table

The @code{termios} structure also contains components which encode baud
rate information, but the representation is not specified.  @xref{Baud
Rate}, for information on how baud rates are specified.
@end deftp

@comment termios.h
@comment POSIX.1
@deftp {Data Type} tcflag_t
This is an unsigned integer type used to represent the various
bit masks for terminal flags.
@end deftp

@comment termios.h
@comment POSIX.1
@deftp {Data Type} cc_t
This is an unsigned integer type used to represent characters associated
with various terminal control functions.
@end deftp

Although @code{tcgetattr} and @code{tcsetattr} specify the terminal
device as a file descriptor, the attributes are those of the terminal
device itself and not of the file descriptor.  This means that the
effects of changing terminal attributes are persistent; if another
process opens the terminal file later on, it will see the changed
attributes even though it doesn't have anything to do with the open file
descriptor you originally specified in changing the attributes.

Similarly, if a single process has multiple or duplicated file
descriptors for the same terminal device, changing the terminal
attributes affects input and output to all of these file
descriptors.  This means, for example, that you can't open one file
descriptor or stream to read from a terminal in the normal
line-buffered, echoed mode; and simultaneously have another file
descriptor for the same terminal that you use to read from it in
single-character, non-echoed mode.  Instead, you have to explicitly
switch the terminal back and forth between the two modes.

When you set terminal attributes, you should generally call
@code{tcgetattr} first to get the current attributes of the particular
terminal device and then modify only those attributes that you are
really interested in.

It's a bad idea to simply initialize a @code{termios} structure to a
chosen set of attributes and pass it directly to @code{tcsetattr}.  In
addition to the problems of choosing values for all of the flags and
parameters that are reasonable for a particular terminal device, the
implementation might support additional attributes, and your program
should not alter them.

For the same reasons, you should avoid blindly copying attributes from
one terminal device to another.

@comment termios.h
@comment POSIX.1
@deftypefun int tcgetattr (int @var{filedes}, struct termios *@var{termios_p})
This function is used to examine the attributes of the terminal
device with file descriptor @var{filedes}.  The attributes are returned
in the structure pointed at by @var{termios_p}.

If successful, @code{tcgetattr} returns @code{0}.  A return value of @code{-1}
indicates an error.  The following @code{errno} error conditions are
defined for this function:

@table @code
@item EBADF
The @var{filedes} argument is not a valid file descriptor.

@item ENOTTY
The @var{filedes} is not associated with a terminal.
@end table
@end deftypefun

@comment termios.h
@comment POSIX.1
@deftypefun int tcsetattr (int @var{filedes}, int @var{when}, const struct termios *@var{termios_p})
This function sets the attributes of the terminal device with file
descriptor @var{filedes}.  The new attributes are taken from the
structure pointed at by @var{termios_p}.

The @var{when} argument specifies how to deal with input and output
already queued.  It can be one of the following values:

@table @code
@vindex TCSANOW
@item TCSANOW
Make the change immediately.

@vindex TCSADRAIN
@item TCSADRAIN
Make the change after waiting until all queued output has been written.
You should usually use this option when changing parameters that affect
output.

@vindex TCSAFLUSH
@item TCSAFLUSH
This is like @code{TCSADRAIN}, but also discards any queued input.
@end table

If this function is called from a background process on its controlling
terminal, normally all processes in the process group are sent a
@code{SIGTTOU} signal, in the same way as if the process were trying to
write to the terminal.  The exception is if the calling process itself
is ignoring or blocking @code{SIGTTOU} signals, in which case the
operation is performed and no signal is sent.  @xref{Job Control}.

If successful, @code{tcsetattr} returns @code{0}.  A return value of
@code{-1} indicates an error.  The following @code{errno} error
conditions are defined for this function:

@table @code
@item EBADF
The @var{filedes} argument is not a valid file descriptor.

@item ENOTTY
The @var{filedes} is not associated with a terminal.

@item EINVAL
Either the value of the @code{when} argument is not valid, or there is
something wrong with the data in the @var{termios_p} argument.
@end table
@end deftypefun

These symbolic constants are defined for use as the @var{when} argument
to @code{tcsetattr}:

@comment termios.h
@comment POSIX.1
@table @code
@vindex TCSANOW
@item TCSANOW
Make the change to the terminal attributes immediately.

@comment termios.h
@comment POSIX.1
@vindex TCSADRAIN
@item TCSADRAIN
Make the change to the terminal attributes after queued output has been
transmitted.

@comment termios.h
@comment POSIX.1
@vindex TCSAFLUSH
@item TCSAFLUSH
Make the change to the terminal attributes after queued output has been
completed, also flushing any queued input in the typeahead buffer.
@end table


@node Input Modes
@subsection Input Modes

This section describes the terminal attribute of flags that control
fairly low-level aspects of input processing: handling of parity errors,
break signals, flow control, and @key{RET} and @key{LFD} characters.

All of these flags are bits in the @code{c_iflag} member of the
@code{termios} structure.  The member is an integer, and you change
flags using the operators @code{&}, @code{|} and @code{^}.

It is not a good idea to set the entire @code{c_iflag} member as a
whole.  Instead, you should alter only the flags whose values matter in
your program, leaving any other flags unchanged.  Your program may be
run years from now, on systems that support flags not listed here.  For
example:

@example
int
set_istrip (int desc, int value)
@{
  struct termios settings;
  int result;

  result = tcgetattr (desc, &settings);
  if (result < 0)
    @{
      perror ("error in tcgetattr");
      return 0;
    @}
  settings.c_iflag &= ~ISTRIP;
  if (value)
    settings.c_iflag |= ISTRIP;
  result = tcgetattr (desc, &settings);
  if (result < 0)
    @{
      perror ("error in tcgetattr");
      return;
   @}
  return 1;
@}
@end example

The values of each of the following macros are bitwise distinct constants.
You can specify the value for the @code{c_iflag} member as the bitwise
OR of the desired flags.

@table @code
@comment termios.h
@comment POSIX.1
@vindex INPCK
@item INPCK
@cindex parity checking
If this bit is set, input parity checking is enabled.  If it is not set,
no checking at all is done for parity errors on input; the
characters are simply passed through to the application.

Parity checking on input processing is independent of whether parity
detection and generation on the underlying terminal hardware is enabled;
see @ref{Control Modes}.  For example, you could clear the @code{INPCK}
input mode flag and set the @code{PARENB} control mode flag to ignore
parity errors on input, but still generate parity on output.

If this bit is set, what happens when a parity error is detected depends
on whether the @code{IGNPAR} or @code{PARMRK} bits are set.  If neither
of these bits are set, a byte with a parity error is passed to the
application as a @code{'\0'} character.

@comment termios.h
@comment POSIX.1
@vindex IGNPAR
@item IGNPAR
If this bit is set, any byte with a framing or parity error is ignored.
This is only useful if @code{INPCK} is also set.

@comment termios.h
@comment POSIX.1
@vindex PARMRK
@item PARMRK
If this bit is set and @code{IGNPAR} is not set, a byte with a framing
or parity error is prefixed with the characters @code{'\377'} and
@code{'\0'} before being passed to the application.  This is only useful
if @code{INPCK} is also set.

@comment termios.h
@comment POSIX.1
@vindex ISTRIP
@item ISTRIP
If this bit is set, valid input bytes are stripped to seven bits;
otherwise, all eight bits are available for programs to read.

If both @code{ISTRIP} and @code{PARMRK} are set, an input byte of 
@code{'\377'} is passed to the application as a two-byte sequence
@code{'\377'}, @code{'\377'}.

@c ??? Is this right?

@comment termios.h
@comment POSIX.1
@vindex IGNBRK
@item IGNBRK
If this bit is set, break conditions are ignored.

@cindex break condition, detecting
A @dfn{break condition} is defined in the context of asynchronous
serial data transmission as a series of zero-value bits longer than a
single byte.

@comment termios.h
@comment POSIX.1
@vindex BRKINT
@item BRKINT
If this bit is set and @code{IGNBRK} is not set, a break condition
causes input and output queues on the terminal to be flushed and a
@code{SIGINT} signal is sent to any foreground process group associated
with the terminal.

If neither @code{BRKINT} nor @code{IGNBRK} are set, a break condition is
passed to the application as a single @code{'\0'} character if
@code{PARMRK} is not set, or otherwise as a three-character sequence 
@code{'\377'}, @code{'\0'}, @code{'\0'}.

@comment termios.h
@comment POSIX.1
@vindex IGNCR
@item IGNCR
If this bit is set, carriage return characters (@code{'\r'}) are
discarded on input.  Discarding carriage return may be useful on
terminals that send both carriage return and linefeed when you type the
@key{RET} key.

@comment termios.h
@comment POSIX.1
@vindex ICRNL
@item ICRNL
If this bit is set and @code{IGNCR} is not set, carriage return characters
(@code{'\r'}) received as input are passed to the application as newline
characters (@code{'\n'}).

@comment termios.h
@comment POSIX.1
@vindex INLCR
@item INLCR
If this bit is set, newline characters (@code{'\n'}) received as input
are passed to the application as carriage return characters (@code{'\r'}).

@comment termios.h
@comment POSIX.1
@vindex IXOFF
@item IXOFF
If this bit is set, start/stop control on input is enabled.  In other
words, the computer sends STOP and START characters as necessary to
prevent input from coming in faster than programs are reading it.  It's
assumed that the actual terminal hardware that is generating the input
data being read responds to a STOP character by suspending data
transmission, and to a START character by resuming transmission.
@xref{Special Characters}.

@comment termios.h
@comment POSIX.1
@vindex IXON
@item IXON
If this bit is set, start/stop control on output is enabled.  In other
words, if the computer receives a STOP character, it suspends output
until a START character is received.  In this case, the STOP and START
characters are never passed to the application program.  If this bit is
not set, then START and STOP can be read as ordinary characters.
@xref{Special Characters}.
@end table

@node Output Modes
@subsection Output Modes

This section describes the terminal flags and fields that control how
output characters are translated and padded for display.  All of these
are contained in the @code{c_oflag} member of the @code{termios}
structure.  The @code{c_iflag} member itself is an integer, and you
change the flags and fields using the operators @code{&}, @code{|}, and
@code{^}.

@c ??? need to copy some other text here and write an example program.

@comment termios.h
@comment POSIX.1
@deftypevr Macro int OPOST
If this bit is set, output data is processed in some unspecified way so
that it is displayed appropriately on the terminal device.  This
typically includes mapping newline characters (@code{'\n'}) onto
carriage return and linefeed pairs.

If this bit isn't set, the characters are transmitted as-is.
@end deftypevr

@c ??? Add here the flags and fields libc actually supports.

@node Control Modes
@subsection Control Modes

This section describes the terminal flags and fields that control
parameters usually associated with asynchronous serial data
transmission.  These flags may not make sense for other kinds of
terminal ports (such as a network connection pseudo-terminal).  All of
these are contained in the @code{c_cflag} member of the @code{termios}
structure.  The @code{c_cflag} member itself is an integer, and you
change the flags and fields using the operators @code{&}, @code{|}, and
@code{^}.

@table @code
@comment termios.h
@comment POSIX.1
@vindex CLOCAL
@item CLOCAL
If this bit is set, it indicates that the terminal is connected
``locally'' and that the modem status lines (such as carrier detect)
should be ignored.
@cindex modem status lines
@cindex carrier detect

If this bit is not set and you call @code{open} without the
@code{O_NONBLOCK} flag set, @code{open} blocks until a modem
connection is established.

If this bit is not set and a modem disconnect is detected, a
@code{SIGHUP} signal is sent to the controlling process for the terminal
(if it has one).  Normally, this causes the process to exit;
see @ref{Signal Handling}.  Reading from the terminal after a disconnect
causes an end-of-file condition, and writing causes an
@code{EIO} error to be returned.  The terminal device must be closed and
reopened to clear the condition.
@cindex modem disconnect

@comment termios.h
@comment POSIX.1
@vindex HUPCL
@item HUPCL
If this bit is set, a modem disconnect is generated when all processes
that have the terminal device open have either closed the file or exited.

@comment termios.h
@comment POSIX.1
@vindex CREAD
@item CREAD
If this bit is set, input can be read from the terminal.  Otherwise,
input is not permitted.

@c ??? What happens if a program tries to do input anyway?

@comment termios.h
@comment POSIX.1
@vindex CSTOPB
@item CSTOPB
If this bit is set, two stop bits are used.  Otherwise, only one stop bit
is used.

@comment termios.h
@comment POSIX.1
@vindex PARENB
@item PARENB
If this bit is set, generation and detection of a parity bit are enabled.
@xref{Input Modes}, for information on how input parity errors are handled.

If this bit is not set, no parity bit is added to output characters, and input characters are not checked for correct parity.

@comment termios.h
@comment POSIX.1
@vindex PARODD
@item PARODD
This bit is only useful if @code{PARENB} is set.  If @code{PARODD} is set,
odd parity is used, otherwise even parity is used.

The control mode flags also includes a field for the number of bits per
character.  You can use the @code{CSIZE} macro as a mask to extract the
value, like this: @code{settings.c_cflag & CSIZE}.

@comment termios.h
@comment POSIX.1
@vindex CSIZE
@item CSIZE
This is a mask for the number of bits per character.

@comment termios.h
@comment POSIX.1
@vindex CS5
@item CS5
This specifies five bits per byte.

@comment termios.h
@comment POSIX.1
@vindex CS6
@item CS6
This specifies six bits per byte.

@comment termios.h
@comment POSIX.1
@vindex CS7
@item CS7
This specifies seven bits per byte.

@comment termios.h
@comment POSIX.1
@vindex CS8
@item CS8
This specifies eight bits per byte.
@end table

@node Line Speed
@subsection Line Speed
@cindex line speed
@cindex baud rate
@cindex terminal line speed
@cindex terminal line speed

The terminal line speed tells the computer how fast to read and write
data on the terminal.

If the terminal is connected to a real serial line, the terminal speed
you specify actually controls the line---if it doesn't match the
terminal's own idea of the speed, communication does not work.  Real
serial ports accept only certain standard speeds.  Also, particular
hardware may not support even all the standard speeds.  Specifying a
speed of zero hangs up a dialup connection and turns off modem control
signals.

If the terminal is not a real serial line (for example, if it is a
network connection), then the line speed won't really affect data
transmission speed, but some programs will use it to determine the
amount of padding needed.  It's best to specify a line speed value that
matches the actual speed of the actual terminal.

There are actually two line speeds for each terminal, one for input and
one for output.  You can set them independently, but most often
terminals use the same speed for both directions.

The speed values are stored in the @code{struct termios} structure, but
you should use the functions in this section to read and store them;
don't try to access them in the @code{struct termios} structure
directly.

You can use the following functions to inquire about and modify the
speeds stored in a @code{termios} structure.

@comment termios.h
@comment POSIX.1
@deftp {Data Type} speed_t
The @code{speed_t} type is an unsigned integer data type used to
represent line speeds.
@end deftp

@comment termios.h
@comment POSIX.1
@deftypefun speed_t cfgetospeed (const struct termios *@var{termios_p})
This function returns the output line speed stored in the structure
@code{*@var{termios_p}}.
@end deftypefun

@comment termios.h
@comment POSIX.1
@deftypefun speed_t cfgetispeed (const struct termios *@var{termios_p})
This function returns the input line speed stored in the structure
@code{*@var{termios_p}}.
@end deftypefun

@comment termios.h
@comment POSIX.1
@deftypefun int cfsetospeed (struct termios *@var{termios_p}, speed_t @var{speed})
This function stores @var{speed} in @code{*@var{termios_p}} as the output
speed.  The normal return value is @code{0}; a value of @code{-1}
indicates an error.  If @var{speed} is not a speed, @code{cfsetospeed}
returns @code{-1}.
@end deftypefun

@comment termios.h
@comment POSIX.1
@deftypefun int cfsetispeed (struct termios *@var{termios_p}, speed_t @var{speed})
This function stores @var{speed} in @code{*@var{termios_p}} as the input
speed.  The normal return value is @code{0}; a value of @code{-1}
indicates an error.  If @var{speed} is not a speed, @code{cfsetospeed}
returns @code{-1}.
@end deftypefun

@strong{Portability note:} With other libraries, @code{cfsetospeed} and
@code{cfsetispeed} might return success for an invalid speed, but
@code{tcsetattr} would return @code{-1}.

@strong{Portability note:} In the GNU library, the functions below
accept speeds measured in baud as input, and return speed values
measured in baud.  Other libraries require speeds to be indicated by
special codes.  For POSIX.1 portability, you must use one of the
following symbols to represent the speed; their precise numeric values
are system-dependent, but each name has a fixed meaning: @code{B110}
stands for 110 baud, @code{B300} for 300 baud, and so on.  There is no
portable way to represent any speed but these, but these are all the
speeds that most serial lines can support.

@comment termios.h
@comment POSIX.1
@vindex B0
@comment termios.h
@comment POSIX.1
@vindex B50
@comment termios.h
@comment POSIX.1
@vindex B75
@comment termios.h
@comment POSIX.1
@vindex B110
@comment termios.h
@comment POSIX.1
@vindex B134
@comment termios.h
@comment POSIX.1
@vindex B150
@comment termios.h
@comment POSIX.1
@vindex B200
@comment termios.h
@comment POSIX.1
@vindex B300
@comment termios.h
@comment POSIX.1
@vindex B600
@comment termios.h
@comment POSIX.1
@vindex B1200
@comment termios.h
@comment POSIX.1
@vindex B1800
@comment termios.h
@comment POSIX.1
@vindex B2400
@comment termios.h
@comment POSIX.1
@vindex B4800
@comment termios.h
@comment POSIX.1
@vindex B9600
@comment termios.h
@comment POSIX.1
@vindex B19200
@comment termios.h
@comment POSIX.1
@vindex B38400
@example
B0  B50  B75  B110  B134  B150  B200
B300  B600  B1200  B1800  B2400  B4800
B9600  B19200  B38400
@end example

@node Local Modes
@subsection Local Modes

This section describes the flags for the @code{c_lflag} member of the
@code{termios} structure.  These flags generally control higher-level
aspects of input processing than the input modes flags described in
@ref{Input Modes}, such as echoing and whether the various control 
characters (@pxref{Special Characters}) are applied.

There are two general alternatives for how input is processed.

@cindex canonical input processing
In @dfn{canonical input processing} mode, terminal input is processed in
lines terminated by newline (@code{'\n'}), EOF, or EOL characters;
see @ref{Special Characters}.  No input can be read until an entire line
has been typed by the user, and the @code{read} function (@pxref{I/O
Primitives}) returns at most a single line of input, no matter how many
bytes are requested.

In canonical input mode, the ERASE and KILL characters are interpreted
specially to perform editing operations within the current line of text.
@xref{Special Characters}.

The constants @code{_POSIX_MAX_CANON} and @code{MAX_CANON} parameterize
the maximum number of bytes which may appear in a single line of
canonical input.  @xref{File System Parameters}.

@cindex non-canonical input processing
In @dfn{non-canonical input processing} mode, characters are not grouped
into lines, and ERASE and KILL processing is not performed.  The
granularity with which bytes are read in non-canonical input mode is
controlled by the MIN and TIME settings.  @xref{Special Characters}.

The values of each of the following macros are bitwise distinct
constants.  You can specify the value for the @code{c_iflag} member as
the bitwise OR of the desired flags.

@table @code
@comment termios.h
@comment POSIX.1
@vindex ICANON
@item ICANON
This bit, if set, enables canonical input processing mode.  Otherwise,
input is processed in non-canonical mode.

@comment termios.h
@comment POSIX.1
@vindex ECHO
@item ECHO
If this bit is set, echoing of input characters back to the terminal
is enabled.
@cindex echo of terminal input

@comment termios.h
@comment POSIX.1
@vindex ECHOE
@item ECHOE
If this bit is set and the @code{ICANON} bit is also set, then the ERASE
character is echoed by erasing the last character in the current line
from the terminal display.  This bit only controls the echoing behavior;
the @code{ICANON} bit controls actual recognition of the ERASE character
and erasure of input.

@comment termios.h
@comment POSIX.1
@vindex ECHOK
@item ECHOK
If this bit is set and the @code{ICANON} bit is also set, then the
KILL character is echoed either by erasing the current line, or by
writing a newline character.  This bit only controls the echoing behavior;
the @code{ICANON} bit controls actual recognition of the KILL character
and erasure of input.

@comment termios.h
@comment POSIX.1
@vindex ECHONL
@item ECHONL
If this bit is set and the @code{ICANON} bit is also set, then the
newline (@code{'\n'}) character is echoed even if the @code{ECHO} bit
is not set.

@comment termios.h
@comment POSIX.1
@vindex ISIG
@item ISIG
This bit controls whether the INTR, QUIT, and SUSP characters are
recognized.  The functions associated with these characters are performed
if and only if this bit is set.  Being in canonical or non-canonical
input mode has no affect on the interpretation of these characters.

You should use caution when disabling recognition of these characters.
Programs that cannot be interrupted interactively are very
user-unfriendly.  If you clear this bit, your program should provide
some alternate interface that allows the user to interactively send the
signals associated with these characters, or to escape from the program.
@cindex interactive signals, from terminal

@comment termios.h
@comment POSIX.1
@vindex IEXTEN
@item IEXTEN
This bit is similar to @code{ISIG}, but controls implementation-defined
special characters.  If it is set, it might override the default behavior
for the @code{ICANON} and @code{ISIG} local mode flags, and the @code{IXON}
and @code{IXOFF} input mode flags.

@comment termios.h
@comment POSIX.1
@vindex NOFLSH
@item NOFLSH
Normally, the INTR, QUIT, and SUSP characters cause input and output
queues for the terminal to be cleared.  If this bit is set, the queues
are not cleared.

@comment termios.h
@comment POSIX.1
@vindex TOSTOP
@item TOSTOP
If this bit is set and the system supports job control, then
@code{SIGTTOU} signals are generated by background processes that
attempt to write to the terminal.  @xref{Access to the Controlling
Terminal}.
@end table

@node Special Characters
@subsection Special Characters

The terminal driver recognizes a number of special characters which
perform various control functions.  These include the INTR character
(normally @kbd{C-c}) for sending a @code{SIGINT} signal, the ERASE
character (usually either backspace or rubout) for editing input,
and the like.

The mapping of functions to characters is specified in the
@code{termios} structure as the @code{c_cc} member.  This is an array;
there are symbolic constants defined for each of the control functions
which are used as array subscripts, and the elements of the array are
corresponding characters that perform these functions.

Some of these characters are only recognized if specific local mode flags
are set.  @xref{Local Modes}, for more information.

If the system supports @code{_POSIX_VDISABLE} for the terminal,
you can also disable each of these functions individually by setting
the corresponding array element to @code{_POSIX_VDISABLE}.  
@xref{File System Parameters}, for more information about this parameter.

@comment termios.h
@comment POSIX.1
@deftypevr Macro int NCCS
The value of this macro is the number of array elements in the
@code{c_cc} member of the @code{termios} structure.
@end deftypevr

Each of the following macros has a distinct value, except that the
@code{VMIN} and @code{VTIME} macros (which are used only in
non-canonical mode) can share values with @code{VEOF} and @code{VEOL}
(which are used only in canonical mode).  The values are all integer
constants.

@comment termios.h
@comment POSIX.1
@deftypevr Macro int VEOF
@cindex EOF character
This is the subscript for the EOF character in the special control
character array.  @code{@var{structure}.c_cc[VEOF]} holds the character
itself.

The EOF character is recognized only in canonical input mode.  It acts
as a line terminator in the same way as a newline character, but if the
EOF character is typed at the beginning of a line it causes @code{read}
to return a byte count of zero, indicating end-of-file.  The EOF
character itself is discarded.

Usually, the EOF character is @kbd{C-d}.
@end deftypevr

@comment termios.h
@comment POSIX.1
@deftypevr Macro int VEOL
@cindex EOL character
This is the subscript for the EOL character in the special control
character array.  @code{@var{structure}.c_cc[VEOL]} holds the character
itself.

The EOL character is recognized only in canonical input mode.  It acts
as a line terminator, just like a newline character.  The EOL character
is not discarded; it is read as the last character in the input line.

@strong{Incomplete:}  Is this usually a carriage return?
@end deftypevr

@comment termios.h
@comment POSIX.1
@deftypevr Macro int VERASE
@cindex ERASE character
This is the subscript for the ERASE character in the special control
character array.  @code{@var{structure}.c_cc[VERASE]} holds the
character itself.

The ERASE character is recognized only in canonical input mode.  When
the user types the erase character, the previous character typed is
discarded.  (If the terminal generates multibyte character sequences,
this may cause more than one byte of input to be discarded.)  This
cannot be used to erase past the beginning of the current line of text.
The ERASE character itself is discarded.

Usually, the ERASE character is @key{DEL}.
@end deftypevr

@comment termios.h
@comment POSIX.1
@deftypevr Macro int VKILL
@cindex KILL character
This is the subscript for the KILL character in the special control
character array.  @code{@var{structure}.c_cc[VKILL]} holds the character
itself.

The KILL character is recognized only in canonical input mode.  When the
user types the kill character, the entire contents of the current line
of input are discarded.  The kill character itself is discarded too.

The KILL character is usually @kbd{C-u}.
@end deftypevr

@comment termios.h
@comment POSIX.1
@deftypevr Macro int VINTR
@cindex INTR character
@cindex interrupt character
This is the subscript for the INTR character in the special control
character array.  @code{@var{structure}.c_cc[VINTR]} holds the character
itself.

The INTR (interrupt) character is recognized only if the @code{ISIG}
local mode flag is set.  It causes a @code{SIGINT} signal to be sent to
all processes in the foreground job associated with the terminal.
@xref{Signal Handling}, for more information about signals.  The INTR
character itself is then discarded.

Typically, the INTR character is @kbd{C-c}.
@end deftypevr

@comment termios.h
@comment POSIX.1
@deftypevr Macro int VQUIT
@cindex QUIT character
This is the subscript for the QUIT character in the special control
character array.  @code{@var{structure}.c_cc[VQUIT]} holds the character
itself.

The QUIT character is recognized only if the @code{ISIG} local mode flag
is set.  It causes a @code{SIGQUIT} signal to be sent to all processes
in the foreground job associated with the terminal.  @xref{Signal
Handling}, for more information about signals.  The QUIT character
itself is then discarded.

Typically, the QUIT character is @kbd{C-\}.
@end deftypevr

@comment termios.h
@comment POSIX.1
@deftypevr Macro int VSUSP
@cindex SUSP character
@cindex suspend character
This is the subscript for the SUSP character in the special control
character array.  @code{@var{structure}.c_cc[VSUSP]} holds the character
itself.

The SUSP (suspend) character is recognized only if the implementation
supports job control (@pxref{Job Control}) and the @code{ISIG} local
mode flag is set.  It causes a @code{SIGTSTP} signal to be sent to all
processes in the foreground job associated with the terminal.
@xref{Signal Handling}, for more information about signals.  The SUSP
character itself is then discarded.

Typically, the SUSP character is @kbd{C-z}.
@end deftypevr

@comment termios.h
@comment POSIX.1
@deftypevr Macro int VSTART
@cindex START character
This is the subscript for the START character in the special control
character array.  @code{@var{structure}.c_cc[VSTART]} holds the
character itself.

The START character is used to support the @code{IXON} and @code{IXOFF}
input modes.  If @code{IXON} is set, receiving a START character resumes
suspended output; the START character itself is discarded.  If
@code{IXOFF} is set, the system may also transmit START characters to
the terminal.

The usual value for the START character is @kbd{C-q}.  You may not be
able to change this value.
@end deftypevr

@comment termios.h
@comment POSIX.1
@deftypevr Macro int VSTOP
@cindex STOP character
This is the subscript for the STOP character in the special control
character array.  @code{@var{structure}.c_cc[VSTOP]} holds the character
itself.

The STOP character is used to support the @code{IXON} and @code{IXOFF}
input modes.  If @code{IXON} is set, receiving a STOP character causes
output to be suspended; the STOP character itself is discarded.  If
@code{IXOFF} is set, the system may also transmit STOP characters to the
terminal, to prevent the input queue from overflowing.

The usual value for the STOP character is @kbd{C-s}.  You may not be
able to change this value.
@end deftypevr

@node Non-canonical Input
@section Non-Canonical Input

In non-canonical input mode, the special characters such as ERASE and
INTR are ignored.  All input characters are treated alike: they are
returned as input to the user program.  The system facilities for the
user to edit input and raise signals are disabled in non-canonical mode.
It is up to the application program to provide the user with ways of
doing these things, if appropriate.

Non-canonical mode does have special features for controlling whether
and how long to wait for input to be available.  You can even use them
to avoid ever waiting---to return immediately with whatever input is
available, or with no input.

@comment termios.h
@comment POSIX.1
@deftypevr Macro int VMIN
@cindex MIN termios slot
This is the subscript for the MIN slot in the special control character
array.

The MIN slot is only meaningful in non-canonical input mode; it
specifies the minimum number of bytes that must be available in the
input queue in order for @code{read} to return.  It interacts with the
TIME slot to determine the condition for @code{read} on the terminal to
return.
@end deftypevr

@comment termios.h
@comment POSIX.1
@deftypevr Macro int VTIME
@cindex TIME termios slot
This is the subscript for the TIME slot in the special control character
array.

The TIME slot is only meaningful in non-canonical input mode; it
specifies how long to wait for input before returning, in units of 0.1
seconds.  It interacts with the MIN slot to determine the condition for
@code{read} on the terminal to return.
@end deftypevr

There are four possible cases for non-canonical input:

@itemize @bullet
@item 
Both MIN and TIME are zero.

In this case, @code{read} always returns immediately with as many
characters as are available in the queue, up to the number requested.
If no input is immediately available, @code{read} returns a value of
zero.

@item
MIN is zero but TIME has a nonzero value.

In this case, @code{read} waits for time TIME for input to become
available; the availability of a single byte is enough to satisfy the
read request and cause @code{read} to return.  When it returns, it
returns as many characters as are available, up to the number requested.
If no input is available before the timer expires, @code{read} returns a
value of zero.

@item
TIME is zero but MIN has a nonzero value.

In this case, @code{read} waits until at least MIN bytes are available
in the queue.  At that time, @code{read} returns as many characters as
are available, up to the number requested.  @code{read} can return more
than MIN characters if more than MIN happen to be in the queue.

@item
Both TIME and MIN are nonzero.

In this case, TIME specifies how long to wait after each input character
to see if more input arrives.  @code{read} keeps waiting until either
MIN bytes have arrived, or TIME elapses with no further input.

@code{read} can return no input if TIME elapses before the first input
character arrives.  @code{read} can return more than MIN characters if
more than MIN happen to be in the queue.
@end itemize

What happens if MIN is 50 and you ask to read just 10 bytes?
Normally, @code{read} waits until there are 50 bytes in the buffer (or,
more generally, the wait condition described above is satisfied), and
then reads 10 of them, leaving the other 40 buffered in the operating
system for a subsequent call to @code{read}.

@node Line Control Functions
@section Line Control Functions
@cindex terminal line control functions

These functions perform miscellanous control actions on terminal
devices.  As regards terminal access, they are treated like doing
output: if any of these functions is used by a background process on its
controlling terminal, normally all processes in the process group are
sent a @code{SIGTTOU} signal.  The exception is if the calling process
itself is ignoring or blocking @code{SIGTTOU} signals, in which case the
operation is performed and no signal is sent.  @xref{Job Control}.

@cindex break condition, generating
@comment termios.h
@comment POSIX.1
@deftypefun int tcsendbreak (int @var{filedes}, int @var{duration})
This function generates a break condition by transmitting a stream of
zero bits on the terminal associated with the file descriptor
@var{filedes}.  The duration of the break is controlled by the
@var{duration} argument.  If zero, the duration is between 0.25 and 0.5
seconds.  The meaning of a nonzero value depends on the operating system.

This function does nothing if the terminal is not an asynchronous serial
data port.

The return value is normally zero.  In the event of an error, a value
of @code{-1} is returned.  The following @code{errno} error conditions
are defined for this function:

@table @code
@item EBADF
The @var{filedes} is not a valid file descriptor.

@item ENOTTY
The @var{filedes} is not associated with a terminal device.
@end table
@end deftypefun


@cindex flushing terminal output queue
@cindex terminal output queue, flushing
@comment termios.h
@comment POSIX.1
@deftypefun int tcdrain (int @var{filedes})
The @code{tcdrain} function waits until all queued
output to the terminal @var{filedes} has been transmitted.

The return value is normally zero.  In the event of an error, a value
of @code{-1} is returned.  The following @code{errno} error conditions
are defined for this function:

@table @code
@item EBADF
The @var{filedes} is not a valid file descriptor.

@item ENOTTY
The @var{filedes} is not associated with a terminal device.

@item EINTR
The operation was interrupted by delivery of a signal.
@end table
@end deftypefun


@cindex clearing terminal input queue
@cindex terminal input queue, clearing
@comment termios.h
@comment POSIX.1
@deftypefun int tcflush (int @var{filedes}, int @var{queue})
The @code{tcflush} function is used to clear the input and/or output
queues associated with the terminal file @var{filedes}.  The @var{queue}
argument specifies which queue(s) to clear, and can be one of the
following values:

@table @code
@vindex TCIFLUSH
@item TCIFLUSH
Clear any input data received, but not yet read.

@vindex TCOFLUSH
@item TCOFLUSH
Clear any output data written, but not yet transmitted.

@vindex TCIOFLUSH
@item TCIOFLUSH
Clear both queued input and output.
@end table

The return value is normally zero.  In the event of an error, a value
of @code{-1} is returned.  The following @code{errno} error conditions
are defined for this function:

@table @code
@item EBADF
The @var{filedes} is not a valid file descriptor.

@item ENOTTY
The @var{filedes} is not associated with a terminal device.

@item EINVAL
A bad value was supplied as the @var{queue} argument.
@end table

It is unfortunate that this function is named @code{tcflush}, because
the term ``flush'' is normally used for quite another operation---waiting
until all output is transmitted---and using it for discarding input or
output would be confusing.  Unfortunately, the name @code{tcflush} comes
from POSIX and we cannot change it.
@end deftypefun

@cindex flow control, terminal
@cindex terminal flow control
@comment termios.h
@comment POSIX.1
@deftypefun int tcflow (int @var{filedes}, int @var{action})
The @code{tcflow} function is used to perform operations relating to
XON/XOFF flow control on the terminal file specified by @var{filedes}.

The @var{action} argument specifies what operation to perform, and can
be one of the following values:

@table @code
@vindex TCOOFF
@item TCOOFF
Suspend transmission of output.

@vindex TCOON
@item TCOON
Restart transmission of output.

@vindex TCIOFF
@item TCIOFF
Transmit a STOP character.

@vindex TCION
@item TCION
Transmit a START character.
@end table

For more information about the STOP and START characters, see @ref{Special
Characters}.

The return value is normally zero.  In the event of an error, a value
of @code{-1} is returned.  The following @code{errno} error conditions
are defined for this function:

@table @code
@vindex EBADF
@item EBADF
The @var{filedes} is not a valid file descriptor.

@vindex ENOTTY
@item ENOTTY
The @var{filedes} is not associated with a terminal device.

@vindex EINVAL
@item EINVAL
A bad value was supplied as the @var{action} argument.
@end table
@end deftypefun


@node Terminal Control Example
@section Terminal Control Example

Here is an example program that shows how you can set up a terminal
device to read single characters in non-canonical input mode, without
echo.

@example
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <termios.h>

/* @r{Use this variable to remember original terminal attributes.} */

struct termios saved_attributes;

void
reset_input_mode (void)
@{
  tcsetattr (STDIN_FILENO, TCSANOW, &saved_attributes);
  signal (SIGCONT, set_input_mode);
@}
  
void 
set_input_mode (void)
@{
  struct termios tattr;
  char *name;

  /* @r{Make sure stdin is a terminal.} */
  if (!isatty (STDIN_FILENO)) @{
    fprintf (stderr, "Not a terminal.\n");
    exit (EXIT_FAILURE);
    @}

  /* @r{Save the terminal attributes so we can restore them later.} */
  tcgetattr (STDIN_FILENO, &saved_attributes);
  atexit (reset_input_mode);

  /* @r{Set the funny terminal modes.} */
  tcgetattr (STDIN_FILENO, &tattr);
  tattr.c_lflag = tattr.c_lflag & (~ICANON);   /* @r{Clear ICANON.} */
  tattr.c_lflag = tattr.c_lflag & (~ECHO);     /* @r{Clear ECHO.} */
  tattr.c_cc[VMIN] = 1;
  tattr.c_cc[VTIME] = 0;
  tcsetattr (STDIN_FILENO, TCSAFLUSH, &tattr);
@}

/* @r{Handle @code{SIGCONT}.} */
void
resumed (int sig)
@{
  set_intput_mode ();
@}

/* @r{Handle signals that take the terminal away.} */
void
handler (int sig)
@{
  reset_input_mode ();
  signal (sig, SIG_DFL);
  /* @r{Make the same signal happen, with no handler.} */
  raise (sig);
  signal (sig, handler);
@}

void
main (void)
@{
  char c;

  set_input_mode ();
  signal (SIGTERM, handler);
  signal (SIGHUP, handler);
  signal (SIGINT, handler);
  signal (SIGQUIT, handler);
  @dots{}
  read (STDIN_FILENO, &c, 1);
  @dots{}
  exit (EXIT_SUCCESS);
@}
@end example

This program is careful to restore the original terminal modes before
exiting or terminating with a signal.  It uses the @code{atexit}
function (@pxref{Normal Program Termination}) to make sure this is done
by @code{exit}.

The signals handled in the example are the ones that typically occur due
to actions of the user.  It might be desirable to handle other signals
such as SIGSEGV that can result from bugs in the program.

The shell is supposed to take care of resetting the terminal modes when
a process is stopped or continued; see @ref{Job Control}.  But some
existing shells do not actually do this, so you may wish to establish
handlers for job control signals that reset terminal modes.  The above
example does so.
