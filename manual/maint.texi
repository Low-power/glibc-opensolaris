@c This is for making the `INSTALL' file for the distribution.
@c Makeinfo ignores it when processing the file from the include.
@setfilename INSTALL

@node Maintenance
@appendix Library Maintenance

@menu
* How to Install the GNU C Library::	How to configure, compile and install
                			 the GNU C library.
* Reporting Bugs::	                How to report bugs (if you want to
                                         get them fixed) and other troubles
                                         you may have with the GNU C library.
* Compatibility with Traditional C::    Using the GNU C library with non-ANSI
                                         C compilers.
* Contributors to the GNU C Library::	Contributors to the GNU C Library.
@end menu


@node How to Install the GNU C Library
@appendixsec How to Install the GNU C Library
@cindex installing the library

Installation of the GNU C library is relatively simple.

You need the latest version of GNU @code{make}.  If you do not have
GNU @code{make}, life is more difficult.  We recommend porting GNU
@code{make} to your system rather than trying to install the GNU C
library without it.  @strong{Really.}@refill

To configure the GNU C library for your system, run the script
@file{configure} with @code{sh}.  You must give as an argument to the
script a word describing your system.  If you give no argument, the
script gives you a list of systems it knows about.  Note that it will
list several systems for which there are not actually working ports of
the library.

By default, the @file{configure} script will set things up to build
things into a subdirectory of the library source directory whose name is
the name of the system you configure for.  For example,
@w{@samp{configure sun4}} creates and uses a directory called
@file{sun4}.  If you give a second argument to @file{configure}, that is
used as the directory name instead.@refill

You can build for several machines from the same source directory, by
specifying the subdirectory that @file{configure} created when you
configured for that machine in the @code{make} variable @samp{ARCH}.
For example, use @samp{make ARCH=sun4}, or put @samp{ARCH=sun4} in your
environment.  If you don't specify a value for @samp{ARCH}, the variable
@samp{machine} is used if defined; otherwise @code{make} will build for
the configuration most recently configured for.@refill

Now edit the file @file{Makeconfig} to set the compilation parameters,
and what directories to install the library and header files in.  See
the comments in @file{Makeconfig} for the details.  If you are building
for several machines, you can put just the values specific to a
particular machine in a file called @file{Makeconfig} in the object
directory for that machine (for example, @file{sun4/Makeconfig}).  This
should @emph{not} be an edited copy of @file{Makeconfig}.  Make a new
file containing just the variables in @file{Makeconfig} that you want to
set specially for the particular machine.  These values will override
the values defined in @file{Makeconfig}.@refill

Some of the machine-dependent code for some machines uses extensions in
the GNU C compiler, so you may need to compile the library with GCC.
(In fact, all of the existing complete ports require GCC.)  If possible,
you should use the GNU linker, GNU @code{ld}, when linking programs with
the GNU C library.  If you are going to use GNU @code{ld}, be sure to
specify @samp{-D__GNU_STAB__} in @file{Makeconfig}.@refill

To build the library and header files, type @code{make}.  This will
produce a lot of output, some of which looks like errors from
@code{make} (but isn't).  Look for error messages from @code{make}
containing @samp{***}.  Those indicate that something is really wrong.
Using the @samp{-w} option to @code{make} may make the output easier to
understand (this option tells @code{make} to print messages telling you
what subdirectories it is working on).@refill

To install the library and header files, type @code{make install}, after
setting the installation directories in @file{Makeconfig} (or
@file{@var{machine}/Makeconfig}).  This will build things if necessary,
before installing them.@refill

@node Reporting Bugs
@appendixsec Reporting Bugs
@cindex reporting bugs

There are probably bugs in the GNU C library.  If you report them,
they will get fixed.  If you don't, no one will ever know about them
and they will remain unfixed for all eternity, if not longer.

To report a bug, first you must find it.  Hopefully, this will be
the hard part.  Once you've found a bug, make sure it's really a
bug.  A good way to do this is to see if the GNU C library behaves
the same way some other C library does.  If so, probably you are
wrong and the libraries are right.  If not, one of the libraries is
probably wrong.

Once you're sure you've found a bug, try to narrow it down to the
smallest test case that reproduces the problem.  In the case of a C
library, you really only need to narrow it down to one library
function call, if possible.  This should not be too difficult.

The final step when you have a simple test case is to report the
bug.  When reporting a bug, send your test case, the results you
got, the results you expected, what you think the problem might be
(if you've thought of anything), your system type, and the version
of the GNU C library which you are using.

@c Uncomment when the manual is distributed.
@c If you are not sure how a function should behave, and this manual
@c doesn't tell you, that's a bug in the documentation.  Report that too!

If you think you have found some way in which the GNU C library does not
conform to the ANSI and POSIX standards (@pxref{Standards and
Portability}), that is definitely a bug.  Report it!@refill

Send bug reports to Internet address @samp{bug-gnu-libc@@prep.ai.mit.edu}
or UUCP path @samp{mit-eddie!prep.ai.mit.edu!bug-gnu-libc}.  If you have
other problems with installation, use, or the documentation, please
report those as well.


@node Compatibility with Traditional C
@appendixsec Compatibility with Traditional C

Although the GNU C library implements the ANSI C library facilities,
you @emph{can} use the GNU C library with traditional, ``pre-ANSI'' C
compilers.  However, there are a couple things you need to watch out for.

You must include a different set of header files when compiling your
program using a traditional C compiler than when compiling with an ANSI
C compiler.  (This is because traditional C compilers do not understand
the function prototypes used in the ANSI C header files.  On the other
hand, if you are using an ANSI C compiler like GCC, you should use the
ANSI C header files because the prototypes permit the compiler to do a
better job of detecting errors in calls to library functions.)  You can
tell the C compiler what directories to search for header files by using
the @samp{-I} option.  Set the @samp{trad-incldir} variable in
@file{Makeconfig} to choose where to install this set of header
files.@refill

You also need to be careful because the content and organization of the
GNU C library header files differs from that of traditional C
implementations.  This means you may need to make changes to your
program in order to get it to compile.


@node Contributors to the GNU C Library
@appendixsec Contributors to the GNU C Library

The GNU C library was written almost entirely by Roland McGrath.
Some parts of the library were contributed by other people.

@itemize @bullet
@item
The @code{getopt} and related functions were written by
Richard Stallman, David J. MacKenzie, and Roland McGrath.

@item
The random number generation functions @code{random}, @code{srandom},
@code{setstate} and @code{initstate}, which are also the basis for the
@code{rand} and @code{srand} functions, were written by Earl T. Cohen
for the University of California at Berkeley and are copyrighted by the
Regents of the University of California.  They have undergone minor
changes to fit into the GNU C library and to fit the ANSI C standard,
but the functional code is Berkeley's.@refill

@item
Most of the math functions are taken from 4.4 BSD, and are
copyrighted by the Regents of the University of California.
They have been modified only slightly to work with the GNU C library.

@item
The @code{qsort} function was written by Douglas C. Schmidt.

@item
The memory allocation functions @code{malloc}, @code{realloc} and
@code{free} and related code were written by Michael J. Haertel.

@item
Fast implementations of many of the string functions (@code{memcpy},
@code{strlen}, etc.) were written by Torbjorn Granlund.

@item
Some of the support code for Mach is taken from Mach 3.0, from CMU,
and is under the following copyright terms:

@display
Mach Operating System
Copyright (c) 1991,1990,1989 Carnegie Mellon University
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

Carnegie Mellon requests users of this software to return to

 Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 School of Computer Science
 Carnegie Mellon University
 Pittsburgh PA 15213-3890

any improvements or extensions that they make and grant Carnegie Mellon
the rights to redistribute these changes.
@end display

@end itemize
