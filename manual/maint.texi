@node Maintenance
@appendix Library Maintenance

@menu
* How to Install the GNU C Library::	How to configure, compile and install
                			 the GNU C library.
* Reporting Bugs::	                How to report bugs (if you want to
                                         get them fixed) and other troubles
                                         you may have with the GNU C library.
* Compatibility with Traditional C::    Using the GNU C library with non-ANSI
                                         C compilers.
* Defining New Locales::                How to define and install new named 
                                         locales.
* Contributors to the GNU C Library::	Contributors to the GNU C Library.
@end menu


@node How to Install the GNU C Library
@appendixsec How to Install the GNU C Library
@cindex installing the library

Installation of the GNU C library is relatively simple.

You need the latest version of GNU @code{make}.  If you do not have
GNU @code{make}, life is more difficult.  We recommend porting GNU
@code{make} to your system rather than trying to install the GNU C
library without it.  @strong{Really.}@refill

To configure the GNU C library for your system, run the script
@file{configure} with @code{sh}.  You must give as an argument to the
script a word describing your system.  If you give no argument, the
script gives you a list of systems it knows about.

The configuration process takes a little while and prints out a slew of
messages telling you what it's doing.  These are probably not very
interesting to read, but you'll have nothing better to do while waiting
for it to finish.

If the configuration is successful, it will say @samp{Successfully
configured}.  If the configuration fails it will say @samp{Failed in
configuration}; you must then figure out the source of the problem and
either fix it or report it as a bug (@pxref{Reporting Bugs}).@refill

After successful configuration, simply run @code{make} to make the
library and related things.  If all goes well, you will end up with the
library archive in the file @file{libc.a}, ANSI C versions of the header
files in the @file{ansi/} subdirectory, and traditional C versions of
the header files in the @file{trad/} subdirectory.  Install the archive
and the header files in appropriate places.

@strong{Incomplete:} This section needs to give more details on what
those ``appropriate places'' are.  What are the default places to
install things, so that users need not tell the compiler and linker
explicitly where to search for these files?  If you install them
someplace else, what options should you tell users to use so that the
compiler and linker will find the files?


@node Reporting Bugs
@appendixsec Reporting Bugs
@cindex reporting bugs

There are probably bugs in the GNU C library.  If you report them,
they will get fixed.  If you don't, no one will ever know about them
and they will remain unfixed for all eternity, if not longer.

To report a bug, first you must find it.  Hopefully, this will be
the hard part.  Once you've found a bug, make sure it's really a
bug.  A good way to do this is to see if the GNU C library behaves
the same way some other C library does.  If so, probably you are
wrong and the libraries are right.  If not, one of the libraries is
probably wrong.

Once you're sure you've found a bug, try to narrow it down to the
smallest test case that reproduces the problem.  In the case of a C
library, you really only need to narrow it down to one library
function call, if possible.  This should not be too difficult.

The final step when you have a simple test case is to report the
bug.  When reporting a bug, send your test case, the results you
got, the results you expected, what you think the problem might be
(if you've thought of anything), your system type, and the version
of the GNU C library which you are using.

If you are not sure how a function should behave, and this manual
doesn't tell you, that's a bug in the documentation.  Report that too!

If you think you have found some way in which the GNU C library does not
conform to the ANSI and POSIX standards (@pxref{Standards and
Portability}), that is definitely a bug.  Report it!@refill

Send bug reports to Internet address @samp{bug-gnu-lib?@@prep.ai.mit.edu}
or UUCP path @samp{mit-eddie!prep.ai.mit.edu!bug-gnu-lib?}.  If you have
other problems with installation, use, or the documentation, please
report those as well.


@node Compatibility with Traditional C
@appendixsec Compatibility with Traditional C

Although the GNU C library implements the ANSI C library facilities,
you @emph{can} use the GNU C library with traditional, ``pre-ANSI'' C
compilers.  However, there are a couple things you need to watch out for.

You must include a different set of header files when compiling your
program using a traditional C compiler than when compiling with an ANSI
C compiler.  (This is because traditional C compilers do not understand
the function prototypes used in the ANSI C header files.  On the other
hand, if you are using an ANSI C compiler like GCC, you should use the
ANSI C header files because the prototypes permit the compiler to do a
better job of detecting errors in calls to library functions.)  You can
tell the C compiler what directories to search for header files by using
the @samp{-I} option.

You also need to be careful because the content and organization of the
GNU C library header files differs from that of traditional C
implementations.  This means you may need to make changes to your
program in order to get it to compile.

@strong{Incomplete:} Maybe list some specific things to watch out for
here, like: some functions from @file{math.h} have been moved to
@file{stdlib.h}; confusion between @file{string.h} and @file{strings.h};
and the like.  Look at Harbison & Steele's C book to get a more complete
list.

@node Defining New Locales
@appendixsec Defining New Locales

@strong{Incomplete:}  Fill in this section.  Presumably this is where
the things in @file{localeinfo.h} will be documented?


@node Contributors to the GNU C Library
@appendixsec Contributors to the GNU C Library

The GNU C library was written almost entirely by Roland McGrath.
Some parts of the library were contributed by other people.

@itemize @bullet
@item
The @code{getopt} function was written by Richard Stallman
and reworked by Roland McGrath.

@item
The random number generation functions @code{random}, @code{srandom},
@code{setstate} and @code{initstate}, which are also the basis for the
@code{rand} and @code{srand} functions, were written by Earl T. Cohen
for the University of California at Berkeley and are copyrighted by the
Regents of the University of California.  They have undergone minor
changes to fit into the GNU C library and to be ANSI conformant, but the
functional code is Berkeley's.@refill

@item
The @code{qsort} function was written by Douglas C. Schmidt.

@item
The memory allocation functions @code{malloc}, @code{realloc} and
@code{free} and related code were written by Michael J. Haertel.
@end itemize
