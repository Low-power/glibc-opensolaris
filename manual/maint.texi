@c \input /gd/gnu/doc/texinfo
@c This is for making the `INSTALL' file for the distribution.
@c Makeinfo ignores it when processing the file from the include.
@setfilename INSTALL

@node Maintenance, Copying, Summary of Library Facilities, Top
@appendix Library Maintenance

@menu
* Installation::                How to configure, compile and install
                			 the GNU C library.
* Reporting Bugs::              How to report bugs (if you want to
                                         get them fixed) and other troubles
                                         you may have with the GNU C library.
* Porting::                     How to port the GNU C library to
                                         a new machine or operating system.
* Compatibility with Traditional C::  Using the GNU C library with non-ANSI
                                         C compilers.
* Contributors to the GNU C Library::  Contributors to the GNU C Library.
@end menu


@node Installation, Reporting Bugs,  , Maintenance
@appendixsec How to Install the GNU C Library
@cindex installing the library

Installation of the GNU C library is relatively simple.

You need the latest version of GNU @code{make}.  If you do not have
GNU @code{make}, life is more difficult.  We recommend porting GNU
@code{make} to your system rather than trying to install the GNU C
library without it.  @strong{Really.}@refill

To configure the GNU C library for your system, run the script
@file{configure} with @code{sh}.  You must give as an argument to the
script a word describing your system, such as @samp{sun4} or @samp{hp300}.

By default, the @file{configure} script will set things up to build
things into a subdirectory of the library source directory whose name is
the name of the system you configure for.  For example,
@w{@samp{configure sun4}} creates and uses a directory called
@file{sun4}.  If you give a second argument to @file{configure}, that is
used as the directory name instead.@refill

You can build for several machines from the same source directory, by
specifying the subdirectory that @file{configure} created when you
configured for that machine in the @code{make} variable @samp{ARCH}.
For example, use @samp{make ARCH=sun4}, or put @samp{ARCH=sun4} in your
environment.  If you don't specify a value for @samp{ARCH}, the variable
@samp{machine} is used if defined; otherwise @code{make} will build for
the configuration most recently configured for.@refill

Now edit the file @file{Makeconfig} to set the compilation parameters,
and what directories to install the library and header files in.  See
the comments in @file{Makeconfig} for the details.  If you are building
for several machines, you can put just the values specific to a
particular machine in a file called @file{Makeconfig} in the object
directory for that machine (for example, @file{sun4/Makeconfig}).  This
should @emph{not} be an edited copy of @file{Makeconfig}.  Make a new
file containing just the variables in @file{Makeconfig} that you want to
set specially for the particular machine.  These values will override
the values defined in @file{Makeconfig}.@refill

Some of the machine-dependent code for some machines uses extensions in
the GNU C compiler, so you may need to compile the library with GCC.
(In fact, all of the existing complete ports require GCC.)  If possible,
you should use the GNU linker, GNU @code{ld}, when linking programs with
the GNU C library.  If you are going to use GNU @code{ld}, be sure to
specify @samp{-DHAVE_GNU_LD} in @file{Makeconfig}.@refill

To build the library and header files, type @code{make}.  This will
produce a lot of output, some of which looks like errors from
@code{make} (but isn't).  Look for error messages from @code{make}
containing @samp{***}.  Those indicate that something is really wrong.
Using the @samp{-w} option to @code{make} may make the output easier to
understand (this option tells @code{make} to print messages telling you
what subdirectories it is working on).@refill

To install the library and header files, type @code{make install}, after
setting the installation directories in @file{Makeconfig} (or
@file{@var{machine}/Makeconfig}).  This will build things if necessary,
before installing them.@refill

@node Reporting Bugs, Porting, Installation, Maintenance
@appendixsec Reporting Bugs
@cindex reporting bugs

There are probably bugs in the GNU C library.  If you report them,
they will get fixed.  If you don't, no one will ever know about them
and they will remain unfixed for all eternity, if not longer.

To report a bug, first you must find it.  Hopefully, this will be
the hard part.  Once you've found a bug, make sure it's really a
bug.  A good way to do this is to see if the GNU C library behaves
the same way some other C library does.  If so, probably you are
wrong and the libraries are right.  If not, one of the libraries is
probably wrong.

Once you're sure you've found a bug, try to narrow it down to the
smallest test case that reproduces the problem.  In the case of a C
library, you really only need to narrow it down to one library
function call, if possible.  This should not be too difficult.

The final step when you have a simple test case is to report the
bug.  When reporting a bug, send your test case, the results you
got, the results you expected, what you think the problem might be
(if you've thought of anything), your system type, and the version
of the GNU C library which you are using.

@c Uncomment when the manual is distributed.
@c If you are not sure how a function should behave, and this manual
@c doesn't tell you, that's a bug in the documentation.  Report that too!

If you think you have found some way in which the GNU C library does not
conform to the ANSI and POSIX standards (@pxref{Standards and
Portability}), that is definitely a bug.  Report it!@refill

Send bug reports to Internet address @samp{bug-gnu-libc@@prep.ai.mit.edu}
or UUCP path @samp{mit-eddie!prep.ai.mit.edu!bug-gnu-libc}.  If you have
other problems with installation, use, or the documentation, please
report those as well.


@node Porting, Compatibility with Traditional C, Reporting Bugs, Maintenance
@appendixsec Porting the GNU C Library

The GNU C library is written to be easily portable to a variety of
machines and operating systems.  Machine- and operating system-dependent
functions are well separated to make it easy to add implementations for
new machines or operating systems.  This section describes the layout of
the library source tree and explains the mechanisms used to select
machine-dependent code to use.

The process of building the library is driven by the makefiles, which
make heavy use of GNU @code{make} features.  The makefiles are very
complex, and you probably don't want to try to understand them.  But
what they do is fairly straightforward, and only requires that you
define a few variables in the right places.

The library sources are divided into subdirectories, grouped by topic.
The @file{string} subdirectory has all the string-manipulation
functions, @file{stdio} has all the standard I/O functions, etc.

Each subdirectory contains a simple makefile, called @file{Makefile},
which defines a few @code{make} variables and then includes the global
makefile @file{Rules} with a line like:

@example
include ../Rules
@end example

@noindent
The basic variables that a subdirectory makefile defines are:

@table @code
@item subdir
The name of the subdirectory, for example @file{stdio}.
This variable @emph{must} be defined.

@item headers
The names of the header files in this section of the library,
such as @file{stdio.h}.

@item routines
@itemx aux
The names of the modules (source files) in this section of the library.
These should be simple names, such as @samp{strlen} (rather than
complete file names, such as @file{strlen.c}).  The idea is that
@code{routines} is for modules that define functions in the library, and
@code{aux} is for auxiliary modules containing things like data
definitions.  But the values of @code{routines} and @code{aux} are
concatenated, so there really is no practical difference.@refill

@item tests
The names of test programs for this section of the library.  These
should be simple names, such as @samp{tester} (rather than complete file
names, such as @file{tester.c}).  @w{@samp{make tests}} will build and
run all the test programs.  If a test program needs input, put the test
data in a file called @file{@var{test-program}.input}; it will given to
the test program on its standard input.  If a test program wants to be
run with arguments, put the arguments (all on a single line) in a file
called @file{@var{test-program}.args}.@refill

@item others
The names of ``other'' in programs associated with this section of the
library.  These are programs which are not tests per se, but are other
small programs included with the library.  These are built by @samp{make
others}.@refill

@item install-lib
@itemx install-data
@itemx install
Files to be installed by @w{@samp{make install}}.  Things listed in
@samp{install-lib} are installed in the directory specified by
@samp{libdir} in @file{Makeconfig} (@pxref{Installation}).  Things
listed in @samp{install-data} are installed in the directory specified
by @samp{datadir} in @file{Makeconfig}.  Things listed in @samp{install}
are installed in the directory specified by @samp{bindir} in
@file{Makeconfig}.@refill

@item distribute
Other files from this subdirectory which should be put into a
distribution tar file.  The source and header files listed in the other
standard variables, and the makefile itself, need not be listed here.
Only define @code{distribute} if there are files used in an unusual way
that should go into the distribution.
@end table

All the machine-dependent and operating system-dependent files in the
library are in the subdirectory @file{sysdeps} under the top-level
library source directory.  This directory contains a hierarchy of
directories.  Each subdirectory of @file{sysdeps} contains source files
for a particular machine or operating system, or for a class of machine
or operating system (for example, systems by a particular vendor, or all
machines that use IEEE floating-point format).  A configuration
specifies an ordered list of these subdirectories.  Each subdirectory
implicitly appends its parent directory to the list.  For example,
specifying the list @file{unix/bsd/vax} is equivalent to specifying the
list @file{unix/bsd/vax unix/bsd unix}.  A subdirectory can also specify
that it implies other subdirectories which are not directly above it in
the directory hierarchy.  If the file @file{Implies} exists in a
subdirectory, it lists other subdirectories of @file{sysdeps} which are
appended to the list, appearing after the subdirectory containing the
@file{Implies} file.  Lines in an @file{Implies} file that begin with a
@samp{#} character are ignored as comments.  For example,
@file{unix/bsd/Implies} contains:@refill

@example
# BSD has Internet-related things.
inet
@end example

@noindent
and @file{unix/Implies} contains:

@example
posix
@end example

@noindent
So the final list is @file{unix/bsd/vax unix/bsd vax unix/inet unix posix}.

A configuration is specified by three parameters: the machine, the
vendor, and the operating system.  @file{configure} uses these to pick
the list of system-dependent directories to look for.  The operating
system usually has a @dfn{base operating system}; this is used like an
additional parameter, and is the most significant one.  For example, if
the operating system is @samp{sunos411}, the base operating system is
@samp{unix/bsd}.  The algorithm is simple; read @file{configure} to see
the details.

There are two ``special'' subdirectories of @file{sysdeps},
@file{generic} and @file{stub}.  These two are always implicitly
appended to the list of subdirectories (in that order), so you needn't
put them in an @file{Implies} file, and you should not create any
subdirectories under them.  @file{generic} is for things that can be
implemented in machine-independent C, using only other
machine-independent functions in the C library.  @file{stub} is for
@dfn{stub} versions of functions which cannot be implemented on a
particular machine or operating system.  These functions always return
an error, and set @code{errno} to @code{ENOSYS} (Function not
implemented).  A source file is known to be system-dependent by its
having a version in @file{generic} or @file{stub}, so every
system-dependent function should have a generic or stub implementation
(there is no point in having both).  If you come across a file that is
in one of the main source directories (@file{string}, @file{stdio},
etc.), and you want to write a machine- or operating system-dependent
version of it, move the file into @file{sysdeps/generic} and write your
new implementation in the appropriate system-specific subdirectory.
Note that if a file is to be system-dependent, it @emph{must not} appear
in one of the main source directories.@refill

There are a few special files that may exist in each subdirectory of
@file{sysdeps}:

@table @file
@item Makefile
A makefile for this machine or operating system, or class of machine or
operating system.  This file is included by the library makefile
@file{Makerules}, which is used by the top-level makefile and the
subdirectory makefiles.  It can change the variables set in the
including makefile or add new rules.  It can use GNU @code{make}
conditional commands based on the variable @samp{subdir} (see above) to
select different sets of variables and rules for different sections of
the library.  It can also set the @code{make} variable
@samp{sysdep-routines}, to specify extra modules to be included in the
library.  You should use @samp{sysdep-routines} rather than adding
modules to @samp{routines} because the latter is used in determining
what to distribute for each subdirectory of the main source tree.@refill

Each makefile in a subdirectory in the ordered list of subdirectories to
be searched is included in order.  Since several system-dependent
makefiles may be included, each should append to @samp{sysdep-routines}
rather than simply setting it:

@example
sysdep-routines := $(sysdep-routines) foo bar
@end example

@item Subdirs
This file contains the names of new whole subdirectories under the
top-level library source tree that should be included for this system.
These subdirectories are treated just like the system-independent
subdirectories in the library source tree, such as @file{stdio} and
@file{math}.  Use this when there are whole new sets of routines and
header files that should go into the library for the system this
subdirectory of @file{sysdeps} implements.  For example,
@file{sysdeps/unix/inet/Subdirs} contains @file{inet}; the @file{inet}
directory contains various network-oriented operations which only make
sense to put in the library on systems that support the Internet.@refill

@item Dist
This file contains the names of files (relative the the subdirectory of
@file{sysdeps} in which it appears) which should be included in the
distribution.  List any new files used by rules in the @file{Makefile}
in the same directory, or header files used by the source files in that
directory.  You don't need to list files that are implementations
(either C or assembly source) of routines whose names are given in the
machine-independent makefiles in the main source tree.
@end table

That is the general system for how system-dependencies are isolated.
The rest of this section describes details of particular implementations
for classes of systems, and how existing classes and systems are
organized.

@menu
* Hierarchy Conventions::       How the @file{sysdeps} hierarchy is
                                 layed out.
* Porting to Unix::             Porting the library to an average
                                 Unix-like system.
@end menu

@node Hierarchy Conventions, Porting to Unix,  , Porting
@appendixsubsec The Layout of the @file{sysdeps} Directory Hierarchy

Different machine architectures are generally at the top level of the
@file{sysdeps} hierarchy.  For example, @file{sysdeps/sparc} and
@file{sysdeps/m68k}.  These contain things specific to those machine
architectures (perhaps with subdirectories for specialization of those
architectures, such as @file{sysdeps/m68k/68881}), but not specific to
any particular operating system.

Things specific to a particular operating system on a particular machine
are canonically put in a subdirectory in the section of the hierarchy
for the operating system, usually with an @file{Implies} file referring
to the top-level subdirectory under @file{sysdeps} for the particular
machine.  For example, @file{unix/bsd/hp9k3bsd} implies @file{m68k}.@refill

There are a few directories at the top level of the @file{sysdeps}
hierarchy that are not for particular machine architectures.

@table @file
@item generic
@itemx stub
As described above (@pxref{Porting}), these are the two subdirectories
that every configuration uses, usually last.

@item ieee754
This directory is for code using the IEEE 754 floating-point format,
where the C type @code{float} is IEEE 754 single-precision format, and
@code{double} is IEEE 754 double-precision format.  Usually this is
directory is referred to in the @file{Implies} file in a machine
architecture-specific directory, such as @file{m68k/Implies}.

@item posix
This directory contains implementations of things in the library in
terms of POSIX.1 functions.  This includes some of the POSIX.1 functions
themselves.  Of course, POSIX.1 cannot be completely implemented in
terms of itself, so a configuration using just @file{posix} cannot be
complete.

@item unix
This is the directory for Unix-like things.  See @xref{Porting to Unix}.
@file{unix} implies @file{posix}.

@item mach
This is the directory for things based on the Mach microkernel from CMU
(including the GNU operating system).  Other basic operating systems
(VMS, for example) would have their own directories at the top level of
the @file{sysdeps} hierarchy, parallel to @file{unix} and @file{mach}.
@end table

@node Porting to Unix,  , Hierarchy Conventions, Porting
@appendixsubsec Porting the GNU C Library to Unix Systems

Most Unix systems are fundamentally very similar.  There are variations
between different machines, and variations in what facilities are
provided by the kernel.  But the interface to the operating system
facilities is, for the most part, pretty uniform and simple.

The code for Unix systems is in the directory @file{unix}, at the top
level of the @file{sysdeps} hierarchy.  This directory contains
subdirectories (and subdirectory trees) for various Unix variants.

The routines which are system calls in most Unix systems are implemented
in assembly code in files in @file{sysdeps/unix}.  These files are named
with a suffix of @samp{.S}; for example, @file{__open.S}.  Files ending
in @samp{.S} are run through the C preprocessor before being fed to the
assembler.  These files all use a set of macros that should be defined
in @file{sysdep.h}.  The @file{sysdep.h} in @file{sysdeps/unix} does not
adequately define them.  They must be defined for the particular machine
and operating system variant.  See @file{sysdeps/unix/sysdep.h} and the
machine-specific @file{sysdep.h} implementations to see what these
macros are and what they should do.@refill

The system-specific makefile for the @file{unix} directory,
@file{sysdeps/unix/Makefile}, gives rules to generate several files from
the Unix system you are building the library on (which is assumed to be
the target system you are building the library @emph{for}).  All the
generated files are put in the directory where the object files are
kept; they should not affect the source tree itself.  The files
generated are: @file{ioctls.h}, @file{errnos.h}, @file{sys/param.h},
and @file{errlist.c} (for the @file{stdio} section of the library).

@node Compatibility with Traditional C, Contributors to the GNU C Library, Porting, Maintenance
@appendixsec Compatibility with Traditional C

Although the GNU C library implements the ANSI C library facilities,
you @emph{can} use the GNU C library with traditional, ``pre-ANSI'' C
compilers.  However, there are a couple things you need to watch out for.

You must include a different set of header files when compiling your
program using a traditional C compiler than when compiling with an ANSI
C compiler.  (This is because traditional C compilers do not understand
the function prototypes used in the ANSI C header files.  On the other
hand, if you are using an ANSI C compiler like GCC, you should use the
ANSI C header files because the prototypes permit the compiler to do a
better job of detecting errors in calls to library functions.)  You can
tell the C compiler what directories to search for header files by using
the @samp{-I} option.  Set the @samp{trad-incldir} variable in
@file{Makeconfig} to choose where to install this set of header
files.@refill

You also need to be careful because the content and organization of the
GNU C library header files differs from that of traditional C
implementations.  This means you may need to make changes to your
program in order to get it to compile.


@node Contributors to the GNU C Library,  , Compatibility with Traditional C, Maintenance
@appendixsec Contributors to the GNU C Library

The GNU C library was written almost entirely by Roland McGrath.
Some parts of the library were contributed by other people.

@itemize @bullet
@item
The @code{getopt} and related functions were written by
Richard Stallman, David J. MacKenzie, and Roland McGrath.

@item
The random number generation functions @code{random}, @code{srandom},
@code{setstate} and @code{initstate}, which are also the basis for the
@code{rand} and @code{srand} functions, were written by Earl T. Cohen
for the University of California at Berkeley and are copyrighted by the
Regents of the University of California.  They have undergone minor
changes to fit into the GNU C library and to fit the ANSI C standard,
but the functional code is Berkeley's.@refill

@item
Most of the math functions are taken from 4.4 BSD, and are
copyrighted by the Regents of the University of California.
They have been modified only slightly to work with the GNU C library.

@item
The @code{qsort} function was written by Douglas C. Schmidt.

@item
The memory allocation functions @code{malloc}, @code{realloc} and
@code{free} and related code were written by Michael J. Haertel.

@item
Fast implementations of many of the string functions (@code{memcpy},
@code{strlen}, etc.) were written by
@tex
Torbj\"orn
@end tex
@ifinfo
Torbjorn
@end ifinfo
Granlund.@refill

@item
Some of the support code for Mach is taken from Mach 3.0, from CMU,
and is under the following copyright terms:

@display
Mach Operating System
Copyright (c) 1991,1990,1989 Carnegie Mellon University
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

Carnegie Mellon requests users of this software to return to

 Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 School of Computer Science
 Carnegie Mellon University
 Pittsburgh PA 15213-3890

any improvements or extensions that they make and grant Carnegie Mellon
the rights to redistribute these changes.
@end display

@item
The @file{tar.h} header file was written by David J. MacKenzie.

@end itemize

@c @bye
