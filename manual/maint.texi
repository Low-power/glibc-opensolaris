@c \input /gd/gnu/doc/texinfo
@c This is for making the `INSTALL' file for the distribution.
@c Makeinfo ignores it when processing the file from the include.
@setfilename INSTALL

@node Maintenance, Copying, Summary of Library Facilities, Top
@appendix Library Maintenance

@menu
* Installation::          How to configure, compile and
                             install the GNU C library.
* Reporting Bugs::        How to report bugs (if you want to
                             get them fixed) and other troubles
                             you may have with the GNU C library.
* Porting::               How to port the GNU C library to
                             a new machine or operating system.
@c * Traditional C::         Using the GNU C library with
@c                              non-ANSI C compilers.
* Contributors::          Contributors to the GNU C Library.
@end menu

@node Installation
@appendixsec How to Install the GNU C Library
@cindex installing the library

Installation of the GNU C library is relatively simple.

You need the latest version of GNU @code{make}.  Modifying the GNU C
Library to work with other Make programs would be so hard that we
recommend you port GNU Make instead.  @strong{Really.}@refill

To configure the GNU C library for your system, run the shell script
@file{configure} with @code{sh}.  Use an argument which is the
conventional GNU name for your system configuration---for example,
@samp{sparc-sun-sunos4.1}, for a Sun 4 running Sunos 4.1.
@xref{Installation, Installation, Installing GNU CC, gcc.info, Using and
Porting GNU CC}, for a full description of standard GNU configuration
names.

The GNU C Library currently supports configurations that match the
following patterns:

@example
sparc-sun-sunos4.@var{n}
m68k-hp-bsd4.3
m68k-sun-sunos4.@var{n}
m68k-sony-bsd4.3
mips-dec-ultrix4.2
@end example

While no other configurations are supported, there are handy aliases for
these few.  (These aliases work in other GNU software as well.)

@example
sun4-sunos4.@var{n}
hp320-bsd4.3
sun3-sunos4.@var{n}
news
decstation-ultrix
@end example

Here are some options that you should specify (if appropriate) when
you run @code{configure}:

@table @samp
@item --with-gnu-ld
Use this option if you plan to use GNU ld to link programs with the GNU
C Library.  (we strongly recommend that you do.)

@item --nfp
Use this option if your computer lacks hardware floating point support.
@end table

The simplest way to run @code{configure} is to do it in the directory
that contains the library sources.  This prepares to build the library
in that very directory.

You can prepare to build the library in some other directory by going
to that other directory to run @code{configure}.  In order to run
configure, you will have to specify a directory for it, like this:

@example
mkdir ../hp320
cd ../hp320
../src/configure hp320-bsd4.3
@end example

@noindent
@code{configure} looks for the sources in whatever directory you
specified for finding @code{configure} itself.  It does not matter where
in the file system the source and build directories are---as long as you
specify the source directory when you run @code{configure}, you will get
the proper results.

This feature let you keep sources and binaries in different
directories, and that makes it easy to build the library for several
different machines from the same set of sources.  Simply create a 
build directory for each target machine, and run @code{configure} in
that directory specifying the target machine's configuration name.

The library has a number of special-purpose configuration parameters.
These are defined in the file @file{Makeconfig}; see the comments in
that file for the details.

But don't edit the file @file{Makeconfig} yourself---instead, create a
file @file{configparms} in the directory where you are building the
library, and define in that file the parameters you want to specify.
@file{configparms} should @emph{not} be an edited copy of
@file{Makeconfig}; specify only the parameters that you want to
override.

Some of the machine-dependent code for some machines uses extensions in
the GNU C compiler, so you may need to compile the library with GCC.
(In fact, all of the existing complete ports require GCC.)

To build the library and header files, type @code{make}.  This will
produce a lot of output, some of which looks like errors from
@code{make} (but isn't).  Look for error messages from @code{make}
containing @samp{***}.  Those indicate that something is really wrong.
Using the @samp{-w} option to @code{make} may make the output easier to
understand (this option tells @code{make} to print messages telling you
what subdirectories it is working on).@refill

To install the library and header files, type @code{make install}, after
setting the installation directories in @file{configparms}.  This will
build things if necessary, before installing them.@refill

@node Reporting Bugs
@appendixsec Reporting Bugs
@cindex reporting bugs

There are probably bugs in the GNU C library.  If you report them,
they will get fixed.  If you don't, no one will ever know about them
and they will remain unfixed for all eternity, if not longer.

To report a bug, first you must find it.  Hopefully, this will be the
hard part.  Once you've found a bug, make sure it's really a bug.  A
good way to do this is to see if the GNU C library behaves the same way
some other C library does.  If so, probably you are wrong and the
libraries are right (but not necessarily).  If not, one of the libraries
is probably wrong.

Once you're sure you've found a bug, try to narrow it down to the
smallest test case that reproduces the problem.  In the case of a C
library, you really only need to narrow it down to one library
function call, if possible.  This should not be too difficult.

The final step when you have a simple test case is to report the
bug.  When reporting a bug, send your test case, the results you
got, the results you expected, what you think the problem might be
(if you've thought of anything), your system type, and the version
of the GNU C library which you are using.

If you are not sure how a function should behave, and this manual
doesn't tell you, that's a bug in the manual.  Report that too!
If the function's behavior disagrees with the manual, then either the
library or the manual has a bug, so report the disagreement.

If you think you have found some way in which the GNU C library does not
conform to the ANSI and POSIX standards (@pxref{Standards and
Portability}), that is definitely a bug.  Report it!@refill

Send bug reports to Internet address @samp{bug-gnu-libc@@prep.ai.mit.edu}
or UUCP path @samp{mit-eddie!prep.ai.mit.edu!bug-gnu-libc}.  If you have
other problems with installation, use, or the documentation, please
report those as well.

@node Porting
@appendixsec Porting the GNU C Library

The GNU C library is written to be easily portable to a variety of
machines and operating systems.  Machine- and operating system-dependent
functions are well separated to make it easy to add implementations for
new machines or operating systems.  This section describes the layout of
the library source tree and explains the mechanisms used to select
machine-dependent code to use.

The process of building the library is driven by the makefiles, which
make heavy use of special features of GNU Make.  The makefiles are very
complex, and you probably don't want to try to understand them.  But
what they do is fairly straightforward, and only requires that you
define a few variables in the right places.

The library sources are divided into subdirectories, grouped by topic.
The @file{string} subdirectory has all the string-manipulation
functions, @file{stdio} has all the standard I/O functions, etc.

Each subdirectory contains a simple makefile, called @file{Makefile},
which defines a few Make variables and then includes the global
makefile @file{Rules} with a line like:

@example
include ../Rules
@end example

@noindent
The basic variables that a subdirectory makefile defines are:

@table @code
@item subdir
The name of the subdirectory, for example @file{stdio}.
This variable @emph{must} be defined.

@item headers
The names of the header files in this section of the library,
such as @file{stdio.h}.

@item routines
@itemx aux
The names of the modules (source files) in this section of the library.
These should be simple names, such as @samp{strlen} (rather than
complete file names, such as @file{strlen.c}).  Use @code{routines} for
modules that define functions in the library, and @code{aux} for
auxiliary modules containing things like data definitions.  But the
values of @code{routines} and @code{aux} are concatenated, so there
really is no practical difference.@refill

@item tests
The names of test programs for this section of the library.  These
should be simple names, such as @samp{tester} (rather than complete file
names, such as @file{tester.c}).  @w{@samp{make tests}} will build and
run all the test programs.  If a test program needs input, put the test
data in a file called @file{@var{test-program}.input}; it will given to
the test program on its standard input.  If a test program wants to be
run with arguments, put the arguments (all on a single line) in a file
called @file{@var{test-program}.args}.@refill

@item others
The names of ``other'' in programs associated with this section of the
library.  These are programs which are not tests per se, but are other
small programs included with the library.  These are built by @samp{make
others}.@refill

@item install-lib
@itemx install-data
@itemx install
Files to be installed by @w{@samp{make install}}.  Things listed in
@samp{install-lib} are installed in the directory specified by
@samp{libdir} in @file{Makeconfig} (@pxref{Installation}).  Files listed
in @code{install-data} are installed in the directory specified by
@samp{datadir} in @file{configparms} or @file{Makeconfig}.  Files listed
in @code{install} are installed in the directory specified by
@samp{bindir} in @file{Makeconfig}.@refill

@item distribute
Other files from this subdirectory which should be put into a
distribution tar file.  The source and header files listed in the other
standard variables, and the makefile itself, need not be listed here.
Only define @code{distribute} if there are files used in an unusual way
that should go into the distribution.
@end table

All the machine-dependent and operating system-dependent files in the
library are in the subdirectory @file{sysdeps} under the top-level
library source directory.  This directory contains a hierarchy of
subdirectories (@pxref{Hierarchy Conventions}).

Each subdirectory of @file{sysdeps} contains source files for a
particular machine or operating system, or for a class of machine or
operating system (for example, systems by a particular vendor, or all
machines that use IEEE floating-point format).  A configuration
specifies an ordered list of these subdirectories.  Each subdirectory
implicitly appends its parent directory to the list.  For example,
specifying the list @file{unix/bsd/vax} is equivalent to specifying the
list @file{unix/bsd/vax unix/bsd unix}.  A subdirectory can also specify
that it implies other subdirectories which are not directly above it in
the directory hierarchy.  If the file @file{Implies} exists in a
subdirectory, it lists other subdirectories of @file{sysdeps} which are
appended to the list, appearing after the subdirectory containing the
@file{Implies} file.  Lines in an @file{Implies} file that begin with a
@samp{#} character are ignored as comments.  For example,
@file{unix/bsd/Implies} contains:@refill

@example
# BSD has Internet-related things.
inet
@end example

@noindent
and @file{unix/Implies} contains:

@example
posix
@end example

@noindent
So the final list is @file{unix/bsd/vax unix/bsd vax unix/inet unix posix}.

A GNU configuration name has three parts: the CPU type, the
manufacturer's name, and the operating system.  @file{configure} uses
these to pick the list of system-dependent directories to look for.  If
the @samp{-nfp} option is not passed to @file{configure}, the directory
@file{@var{machine}/fpu} is used.  The operating system usually has a
@dfn{base operating system}; this is used like an additional parameter,
and is the most significant one.  For example, if the operating system
is @samp{sunos4.1}, the base operating system is @samp{unix/bsd}.  The
algorithm is simple; read @file{configure} to see the details.

@file{sysdeps} has two ``special'' subdirectories, called @file{generic}
and @file{stub}.  These two are always implicitly appended to the list
of subdirectories (in that order), so you needn't put them in an
@file{Implies} file, and you should not create any subdirectories under
them.  @file{generic} is for things that can be implemented in
machine-independent C, using only other machine-independent functions in
the C library.  @file{stub} is for @dfn{stub} versions of functions
which cannot be implemented on a particular machine or operating system.
The stub functions always return an error, and set @code{errno} to
@code{ENOSYS} (Function not implemented).  @xref{Error Reporting}.

A source file is known to be system-dependent by its having a version in
@file{generic} or @file{stub}; every system-dependent function should
have either a generic or stub implementation (there is no point in
having both).

If you come across a file that is in one of the main source directories
(@file{string}, @file{stdio}, etc.), and you want to write a machine- or
operating system-dependent version of it, move the file into
@file{sysdeps/generic} and write your new implementation in the
appropriate system-specific subdirectory.  Note that if a file is to be
system-dependent, it @emph{must not} appear in one of the main source
directories.@refill

There are a few special files that may exist in each subdirectory of
@file{sysdeps}:

@table @file
@item Makefile
A makefile for this machine or operating system, or class of machine or
operating system.  This file is included by the library makefile
@file{Makerules}, which is used by the top-level makefile and the
subdirectory makefiles.  It can change the variables set in the
including makefile or add new rules.  It can use GNU Make conditional
commands based on the variable @samp{subdir} (see above) to select
different sets of variables and rules for different sections of the
library.  It can also set the Make variable @samp{sysdep-routines}, to
specify extra modules to be included in the library.  You should use
@samp{sysdep-routines} rather than adding modules to @samp{routines}
because the latter is used in determining what to distribute for each
subdirectory of the main source tree.@refill

Each makefile in a subdirectory in the ordered list of subdirectories to
be searched is included in order.  Since several system-dependent
makefiles may be included, each should append to @samp{sysdep-routines}
rather than simply setting it:

@example
sysdep-routines := $(sysdep-routines) foo bar
@end example

@item Subdirs
This file contains the names of new whole subdirectories under the
top-level library source tree that should be included for this system.
These subdirectories are treated just like the system-independent
subdirectories in the library source tree, such as @file{stdio} and
@file{math}.

Use this when there are whole new sets of routines and header files that
should go into the library for the system this subdirectory of
@file{sysdeps} implements.  For example,
@file{sysdeps/unix/inet/Subdirs} contains @file{inet}; the @file{inet}
directory contains various network-oriented operations which only make
sense to put in the library on systems that support the Internet.@refill

@item Dist
This file contains the names of files (relative the the subdirectory of
@file{sysdeps} in which it appears) which should be included in the
distribution.  List any new files used by rules in the @file{Makefile}
in the same directory, or header files used by the source files in that
directory.  You don't need to list files that are implementations
(either C or assembly source) of routines whose names are given in the
machine-independent makefiles in the main source tree.
@end table

That is the general system for how system-dependencies are isolated.
The rest of this section describes details of particular implementations
for classes of systems, and how existing classes and systems are
organized.

@menu
* Hierarchy Conventions::       The layout of the @file{sysdeps} hierarchy.
* Porting to Unix::             Porting the library to an average
                                   Unix-like system.
@end menu

@node Hierarchy Conventions
@appendixsubsec The Layout of the @file{sysdeps} Directory Hierarchy

Different machine architectures are generally at the top level of the
@file{sysdeps} directory tree.  For example, @file{sysdeps/sparc} and
@file{sysdeps/m68k}.  These contain files specific to those machine
architectures (perhaps with subdirectories for specialization of those
architectures, such as @file{sysdeps/m68k/68881}), but not specific to
any particular operating system.

Files specific to a particular operating system on a particular machine
should be in a subdirectory in the section of the hierarchy for the
operating system, usually with an @file{Implies} file referring to the
top-level subdirectory under @file{sysdeps} for the particular machine.
For example, @file{unix/bsd/hp9k3bsd} implies @file{m68k}.@refill

There are a few directories at the top level of the @file{sysdeps}
hierarchy that are not for particular machine architectures.

@table @file
@item generic
@itemx stub
As described above (@pxref{Porting}), these are the two subdirectories
that every configuration uses, usually last.

@item ieee754
This directory is for code using the IEEE 754 floating-point format,
where the C type @code{float} is IEEE 754 single-precision format, and
@code{double} is IEEE 754 double-precision format.  Usually this is
directory is referred to in the @file{Implies} file in a machine
architecture-specific directory, such as @file{m68k/Implies}.

@item posix
This directory contains implementations of things in the library in
terms of POSIX.1 functions.  This includes some of the POSIX.1 functions
themselves.  Of course, POSIX.1 cannot be completely implemented in
terms of itself, so a configuration using just @file{posix} cannot be
complete.

@item unix
This is the directory for Unix-like things.  See @xref{Porting to Unix}.
@file{unix} implies @file{posix}.

@item mach
This is the directory for things based on the Mach microkernel from CMU
(including the GNU operating system).  Other basic operating systems
(VMS, for example) would have their own directories at the top level of
the @file{sysdeps} hierarchy, parallel to @file{unix} and @file{mach}.
@end table

@node Porting to Unix
@appendixsubsec Porting the GNU C Library to Unix Systems

Most Unix systems are fundamentally very similar.  There are variations
between different machines, and variations in what facilities are
provided by the kernel.  But the interface to the operating system
facilities is, for the most part, pretty uniform and simple.

The code for Unix systems is in the directory @file{unix}, at the top
level of the @file{sysdeps} hierarchy.  This directory contains
subdirectories (and subdirectory trees) for various Unix variants.

The routines which are system calls in most Unix systems are implemented
in assembly code in files in @file{sysdeps/unix}.  These files are named
with a suffix of @samp{.S}; for example, @file{__open.S}.  Files ending
in @samp{.S} are run through the C preprocessor before being fed to the
assembler.

These files all use a set of macros that should be defined in
@file{sysdep.h}.  The file @file{sysdep.h} in @file{sysdeps/unix}
partially defines them; a file @file{sysdep.h} in another directory must
finish defining them for the particular machine and operating system
variant.  See @file{sysdeps/unix/sysdep.h} and the machine-specific
@file{sysdep.h} implementations to see what these macros are and what
they should do.@refill

The system-specific makefile for the @file{unix} directory,
@file{sysdeps/unix/Makefile}, gives rules to generate several files from
the Unix system you are building the library on (which is assumed to be
the target system you are building the library @emph{for}).  All the
generated files are put in the directory where the object files are
kept; they should not affect the source tree itself.  The files
generated are @file{ioctls.h}, @file{errnos.h}, @file{sys/param.h}, and
@file{errlist.c} (for the @file{stdio} section of the library).

@ignore
@c This section might be a good idea if it is finished,
@c but there's no point including it as it stands. --rms
@node Traditional C
@appendixsec Compatibility with Traditional C

@c ??? This section is really short now.  Want to keep it? --roland

Although the GNU C library implements the ANSI C library facilities, you
@emph{can} use the GNU C library with traditional, ``pre-ANSI'' C
compilers.  However, you need to be careful because the content and
organization of the GNU C library header files differs from that of
traditional C implementations.  This means you may need to make changes
to your program in order to get it to compile.
@end ignore

@node Contributors,  , Traditional C Compatibility, Maintenance
@appendixsec Contributors to the GNU C Library

The GNU C library was written almost entirely by Roland McGrath.
Some parts of the library were contributed by other people.

@itemize @bullet
@item
The @code{getopt} and related functions were written by
Richard Stallman, David J. MacKenzie, and Roland McGrath.

@item
The random number generation functions @code{random}, @code{srandom},
@code{setstate} and @code{initstate}, which are also the basis for the
@code{rand} and @code{srand} functions, were written by Earl T. Cohen
for the University of California at Berkeley and are copyrighted by the
Regents of the University of California.  They have undergone minor
changes to fit into the GNU C library and to fit the ANSI C standard,
but the functional code is Berkeley's.@refill

@item
Most of the math functions are taken from 4.4 BSD, and are
copyrighted by the Regents of the University of California.
They have been modified only slightly to work with the GNU C library.

@item
The merge sort function @code{qsort} was written by Michael J. Haertel.

@item
The quick sort function used as a fallback by @code{qsort} was written
by Douglas C. Schmidt.

@item
The memory allocation functions @code{malloc}, @code{realloc} and
@code{free} and related code were written by Michael J. Haertel.

@item
Fast implementations of many of the string functions (@code{memcpy},
@code{strlen}, etc.) were written by
@tex
Torbj\"orn
@end tex
@ifinfo
Torbjorn
@end ifinfo
Granlund.@refill

@item
Some of the support code for Mach is taken from Mach 3.0, from CMU,
and is under the following copyright terms:

@display
Mach Operating System
Copyright (c) 1991,1990,1989 Carnegie Mellon University
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"
CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND FOR
ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

Carnegie Mellon requests users of this software to return to

 Software Distribution Coordinator  or  Software.Distribution@@CS.CMU.EDU
 School of Computer Science
 Carnegie Mellon University
 Pittsburgh PA 15213-3890

any improvements or extensions that they make and grant Carnegie Mellon
the rights to redistribute these changes.
@end display

@item
The @file{tar.h} header file was written by David J. MacKenzie.

@item
The port to the MIPS DECStation was contributed by Brendan Kehoe and Ian
Lance Taylor.

@item
The DES encryption function @code{crypt} and related code was donated by
Michael Glad.

@item
The @code{ftw} function was contributed by Ian Lance Taylor.
@end itemize

@c @bye
