@node Input/Output Overview
@chapter Input/Output Overview

Most programs need to do either input (reading data) or output (writing
data), or most frequently both, in order to do anything useful.  The GNU
C Library provides such a large selection of input and output functions
that the hardest part is often deciding which function is most
appropriate!

This chapter introduces concepts and terminology relating to input
and output.  Other chapters relating to the GNU I/O facilities are:

@itemize @bullet
@item
@ref{Input/Output on Streams}, which covers the high-level functions
that operate on streams, including formatted input and output.

@item
@ref{Low-Level Input/Output}, which covers the basic i/o and control
functions on file descriptors.

@item
@ref{File System Interface}, which covers functions for operating on
directories and for manipulating file attributes such as access modes
and ownership.

@item
@ref{Pipes and FIFOs}, which includes information on the basic interprocess
communication facilities.

@item
@ref{Sockets}, covering a more complicated interprocess communication
facility with support for networking.

@item
@ref{Low-Level Terminal Interface}, which covers functions for changing
how input and output to terminal or other serial devices are processed.
@end itemize


@menu
* Input/Output Concepts::		Some basic information and terminology.
* File Names::				How to refer to a file.
@end menu

@node Input/Output Concepts
@section Input/Output Concepts

Before you can read or write the contents of a file, you must establish
a connection or communications channel to the file.  This process is
called @dfn{opening} the file.  You can open a file for reading, writing,
or both.
@cindex opening a file

The connection to an open file is represented as a stream or file
descriptor.  You pass this as an argument to the functions that do the
actual read or write operations, to tell them which file to operate on.

When you have finished reading to or writing from the file, you can
terminate the connection by @dfn{closing} the file.  Once you have
closed a stream or file descriptor, you cannot do any more input or
output operations on it.

@menu
* Streams and File Descriptors::	The GNU Library provides two ways
					 to access the contents of files.
* File Position Indicator::
@end menu

@node Streams and File Descriptors
@subsection Streams and File Descriptors

When you want to do input or output to a file, you have a choice of two
basic mechanisms for representing the connection between your program
and the file: file descriptors and streams.  File descriptors are
represented as objects of type @code{int}, while streams are represented
as @code{FILE *} objects.

File descriptors provide a primitive, low-level interface to input and
output operations.  Both file descriptors and streams can represent a
connection to a device (such as a terminal), or a pipe or socket for
communicating with another process, as well as a normal file.  But, if
you want to do control operations that are specific to one of these
particular kinds of connections, you must deal with it as a file
descriptor rather than as a stream.  You must also use file descriptors
if your program needs to do input or output in special modes, such as
nonblocking (or polled) input.

Streams provide a higher-level interface, layered on top of the
primitive file descriptor facilities.  The stream interface treats all
kinds of connections in the same way.

The main advantage of using the stream interface is that the set of
functions for performing actual input and output operations (as opposed
to control operations) on streams is much richer and more powerful than
the corresponding facilities for file descriptors.  The file descriptor
interface provides only simple functions for transferring blocks of
characters, but the stream interface also provides powerful
formatted input and output functions as well as functions for character-
and line-oriented input and output.

Since streams are implemented in terms of file descriptors, you can
extract the file descriptor from a stream and perform low-level
operations directly on the file descriptor.  You can also initially open
a connection as a file descriptor and then make a stream associated with
that file descriptor.

In general, you should stick with using streams rather than file
descriptors, unless there is some specific operation you want to do that
can only be done on a file descriptor.  If you are a beginning
programmer and aren't sure what functions to use, we suggest that you
concentrate on the formatted input and output functions
(@pxref{Formatted Input} and @pxref{Formatted Output}, respectively).

If you are concerned about portability of your programs to systems other
than GNU, you should also be aware that file descriptors are not as
portable as streams.  You can expect any system running ANSI C to
support streams, but non-GNU systems may not support file descriptors at
all, or may only implement a subset of the GNU functions that operate on
file descriptors.  Most of the file descriptor functions in the GNU
library are included in the POSIX.1 standard, however.

@node File Position Indicator
@subsection File Position Indicator

One of the attributes of an open file is its @dfn{file position indicator}
that keeps track of where in the file the next character is to be read
or written.  In the GNU system, the file position is simply an integer
representing the number of bytes from the beginning of the file.

The file position is normally set to the beginning of the file when it
is opened, and each time a character is read or written, the file
position is incremented.  In other words, access to the file is normally
@dfn{sequential}.
@cindex file position indicator
@cindex sequential-access files

Some kinds of files permit read or write operations at any position
within the file; these files are sometimes referred to as
@dfn{random-access} files.  You can change the file position indicator
using the @code{fseek} function on a stream (@pxref{File Positioning})
or the @code{lseek} function on a file descriptor (@pxref{Input and
Output Primitives}).
@cindex random-access files

Typically, streams and file descriptors that correspond to real files on
a disk and not to interactive devices or pipes to another process can be
positioned, but there's no guarantee that @emph{any} file can be
positioned.  If you try to perform a file positioning function on a file
that doesn't support such operations, it reports failure.

Files that are opened for @dfn{append access} are treated a little
differently.  Output to such files is @emph{always} appended
sequentially to the @emph{end} of the file, regardless of the file
position.  But, the file position indicator is still used to control
where reading occurs in the file.
@cindex append-access files


@node File Names
@section File Names

In order to open a connection to a file, or to perform other operations
such as deleting a file, you need some way to refer to the file.  Files
--- even files that are really entire devices instead of components of a
device such as a disk --- can be referred to by names that are strings.
These strings are called @dfn{file names}.
@cindex file name

@menu
* Directories::			Directories contain entries for files.
* File Name Resolution::	A file name specifies how to look up a file.
* Restrictions on File Names::	
* File Name Errors::		Error conditions relating to file names.
* Portability of File Names::
@end menu


@node Directories
@subsection Directories

In order to understand the syntax of file names, you need to understand
a little bit about what directories are and how the file system is
organized.

@cindex directory
@cindex link
@cindex directory entry
A @dfn{directory} is a file that contains information to associate other
files with names; these associations are called @dfn{links} or
@dfn{directory entries}.  Sometimes, people speak of ``files in a
directory'', but in reality, a directory only contains pointers to
files, not the files themselves.

@cindex file name component
The name of a file contained in a directory entry is called a @dfn{file
name component}.  This is distinct from a file name; a file name
component names the file relative to a directory it is linked to, while
a file name also indicates which directory contains the file.

Some other documents, such as the POSIX standard, use the term
@dfn{pathname} for what this manual calls a file name, and either
@dfn{filename} or @dfn{pathname component} for what this manual calls a
file name component.  The two sets of terminology can be confusing, but
we always use ``file name'' and ``file name component'' (or sometimes
just ``component'', where the context is obvious) in this manual.

You can find more detailed information about operations on directories
in @ref{File System Interface}.


@node File Name Resolution
@subsection File Name Resolution

A file name string consists of file name components separated by slash
(@samp{/}) characters.  (Multiple successive @samp{/} characters are
treated like a single @samp{/} character.)

@cindex file name resolution
The process of determining what file a file name refers to is called
@dfn{file name resolution}.  This is performed by examining the
components that make up a file name in left-to-right order, and locating
each successive component in the directory named by the previous
component.  Of course, each of the files that are referenced as
directories must actually exist, be directories instead of regular
files, and have the appropriate permissions to be accessible by the
process; otherwise the file name resolution fails.

@cindex root directory
@cindex absolute file name
If a file name begins with a @samp{/}, the first component in the file
name is located in the @dfn{root directory} of the process.  Such a file
name is called an @dfn{absolute file name}.

@cindex relative file name
Otherwise, the first component in the file name is located in the
current working directory (@pxref{Working Directory}).  This kind of
file name is called a @dfn{relative file name}.

@cindex parent directory
The file name components @file{.} (``dot'') and @file{..} (``dot-dot'')
have special meanings.  Every directory has entries for these file name
components.  The file name component @file{.} refers to the directory
itself, while the file name component @file{..} refers to its
@dfn{parent directory} (the directory that contains the link for the
directory in question).

Here are some examples of file names:

@table @file
@item /a
The file named @file{a}, in the root directory.

@item /a/b
The file named @file{b}, in the directory named @file{a} in the root directory.

@item a
The file named @file{a}, in the current working directory.

@item /a/./b
This is the same as @file{/a/b}.  

@item ./a
The file named @file{a}, in the current working directory.

@item ../a
The file named @file{a}, in the parent directory of the current working
directory.
@end table

A file name that names a directory may optionally end in a @samp{/}.  You
can specify a file name of @file{/} to refer to the root directory, but
you can't have an empty file name.  If you want to refer to the current
working directory, use a file name of @file{.} or @file{./}.


@node Restrictions on File Names
@subsection Restrictions on File Names

Individual file name components of a file name string may not be longer
than @code{NAME_MAX} characters.  The GNU system always flags names that
are too long as an error condition, but other implementations might just
quietly truncate the name instead.

In addition, the total size of a file name string (including its
terminating null character) can be at most @code{PATH_MAX} characters.
@xref{File System Parameters}.

Upper- and lower-case characters are considered distinct in file names.
Portable file name components can contain only the letters @samp{a}
through @samp{z} and @samp{A} through @samp{Z}; the digits @samp{0}
through @samp{9}; and the characters @samp{.} (period), @samp{_}
(underscore), and @samp{-} (hyphen).  A hyphen can't be used as the
first character of a portable file name component.

For example, the following file name components are all portable:

@example
"foo.text"
"version.13.notes"
"README-FIRST"
@end example

@noindent
but these file name components are not:

@example
"-delete-me"
"vmshost::[LUSER]LOGIN.COM"
@end example

Of course, most POSIX implementations are much less restrictive than
this about what characters can appear in file name components, but
different implementations might support different extensions.

@strong{Incomplete:}  What should I say about the GNU system in this
respect?

Unlike some other operating systems, the GNU system doesn't have any
built-in support for file types (or extensions) or file versions as part
of its file name syntax.  Many programs and utilities use conventions
for file names --- for example, files containing C source code usually
have names suffixed with @samp{.c} --- but there is nothing in the file
system itself that enforces this kind of convention.


@node File Name Errors
@subsection File Name Errors

@cindex file name syntax errors
@cindex usual file name syntax errors

Functions that accept file name arguments usually detect these
@code{errno} error conditions relating to file name syntax.  These
errors are referred to throughout this manual as the @dfn{usual file
name syntax errors}.

@table @code
@item EACCES
The process does not have search permission for a directory component 
of the file name.

@item ENAMETOOLONG
This error is used when either the the total length of a file name is
greater than @code{PATH_MAX}, or when an individual file name component
has a length greater than @code{NAME_MAX}.  @xref{File System Parameters}.

@item ENOENT
This error is reported when a file referenced as a directory component
in the file name doesn't exist.  It also is used when an empty file name
string is supplied.

@item ENOTDIR
A file that is referenced as a directory component in the file name
exists, but the file isn't a directory.
@end table


@node Portability of File Names
@subsection Portability of File Names

The rules for the syntax of file names discussed in @ref{File Names},
are the rules normally used by the GNU system and by other operating
systems that are compatible with the POSIX.1 standard.  However, other
operating systems may use other conventions.

There are two reasons why it can be important for you to be aware of
file name portability issues:

@itemize @bullet
@item 
If your program makes assumptions about file name syntax, or contains
embedded literal file name strings, it is more difficult to get it to
run under other operating systems that use different syntax conventions.

@item
Even if you are not concerned about running your program on machines
that run other operating systems, it may still be possible to access
files that use different naming conventions.  For example, you may be
able to access file systems on another computer running a different
operating system over a network, or read and write disks in formats used
by other operating systems.
@end itemize

The ANSI C standard says very little about file name syntax, only that
file names are strings.  In addition to the obvious restrictions on the
length of file names and what characters can validly appear in a file
name, different operating systems use different conventions and syntax
for concepts such as structured directories and file types or
extensions.  Some concepts such as file versions might be supported in
some operating systems and not by others.

