# Copyright (C) 1991, 1992, 1993, 1994 Free Software Foundation, Inc.
# This file is part of the GNU C Library.

# The GNU C Library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public License
# as published by the Free Software Foundation; either version 2 of
# the License, or (at your option) any later version.

# The GNU C Library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.

# You should have received a copy of the GNU Library General Public
# License along with the GNU C Library; see the file COPYING.LIB.  If
# not, write to the Free Software Foundation, Inc., 675 Mass Ave,
# Cambridge, MA 02139, USA.

# errno.texinfo contains lines like:
# @comment errno.h
# @comment POSIX.1: Function not implemented
# @deftypevr Macro int ENOSYS

BEGIN {
    printf "/* This file generated by";
    for (i = 0; i < ARGC; ++i)
      printf " %s", ARGV[i];
    printf ".  */\n";
    print "";
    print "/* The Hurd uses Mach error system 0x10, currently only subsystem 0. */";
    print "#ifndef _HURD_ERRNO";
    print "#define _HURD_ERRNO(n)\t((0x10 << 26) | ((n) & 0x3fff))";
    print "#endif";
    print "";
    print "#ifdef _ERRNO_H\n";
    print "enum\n{";
    errno = 0;
    errnoh = 0;
    in_mach_errors = 0;
    in_math = 0;
  }

$1 == "@comment" && $2 == "errno.h" { errnoh=1; next }
$1 == "@comment" && errnoh == 1 \
  {
    ++errnoh;
    etext = "";
    for (i = 3; i <= NF; ++i)
      etext = etext " " $i;
    next;
  }

errnoh == 2 && $1 == "@deftypevr"  && $2 == "Macro" && $3 == "int" \
  {
    e = $4;
    if (e == "EWOULDBLOCK")
      {
	print "#define EWOULDBLOCK EAGAIN /* Operation would block */";
	next;
      }
    if (e == "EDOM" || e == "ERANGE")
      {
	if (! in_math)
	  {
	    print "};"
	    print "#endif /* <errno.h> included.  */";
	    print "#if (!defined (__Emath_defined) && " \
	          "(defined (_ERRNO_H) || defined (__need_Emath)))";
	    print "enum\n{";
	    in_math = 1;
	  }
      }
    else if (in_math)
      {
	print "};"
	print "#endif \
	  /* Emath not defined and <errno.h> included or need Emath.  */";
	print "#ifdef _ERRNO_H";
	print "enum\n{";
	in_math = 0;
      }
    printf "%-40s/*%s */\n", sprintf ("%-24s%s", "#define\t" e, e), etext;
    printf "\t%-16s= _HURD_ERRNO (%d),\n", e, ++errno;
    next;
  }
{ errnoh=0 }

NF == 3 && $1 == "#define" && $2 == "MACH_MSG_SUCCESS" \
  {
    in_mach_errors = 1;
    print "\n\t/* Errors from <mach/message.h>.  */";
  }
NF == 3 && $1 == "#define" && $2 == "KERN_SUCCESS" \
  {
    in_mach_errors = 1;
    print "\n\t/* Errors from <mach/kern_return.h>.  */";
  }

in_mach_errors && $2 == "MACH_IPC_COMPAT" \
  {
    in_mach_errors = 0;
  }

in_mach_errors == 1 && NF == 3 && $1 == "#define" \
  {
    printf "\t%-32s= %s,\n", "E" $2, $3;
  }

END \
  {
    print "";
    print "};";
    print "";
    printf "#define\t_HURD_ERRNOS\t%d\n", ++errno;
    print "";
    print "#endif /* <errno.h> included.  */";
  }
